{"ast":null,"code":"/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\nTHREE.MTLLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.MTLLoader.prototype = {\n  constructor: THREE.MTLLoader,\n  crossOrigin: 'anonymous',\n\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === undefined ? THREE.LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new THREE.FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text, path));\n    }, onProgress, onError);\n  },\n\n  /**\n   * Set base path for resolving references.\n   * If set this path will be prepended to each loaded and found reference.\n   *\n   * @see setResourcePath\n   * @param {String} path\n   * @return {THREE.MTLLoader}\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setPath: function (path) {\n    this.path = path;\n    return this;\n  },\n\n  /**\n   * Set base path for additional resources like textures.\n   *\n   * @see setPath\n   * @param {String} path\n   * @return {THREE.MTLLoader}\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.setResourcePath( 'assets/textures/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setResourcePath: function (path) {\n    this.resourcePath = path;\n    return this;\n  },\n  setTexturePath: function (path) {\n    console.warn('THREE.MTLLoader: .setTexturePath() has been renamed to .setResourcePath().');\n    return this.setResourcePath(path);\n  },\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  setMaterialOptions: function (value) {\n    this.materialOptions = value;\n    return this;\n  },\n\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {THREE.MTLLoader.MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n  parse: function (text, path) {\n    var lines = text.split('\\n');\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(' ');\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      var value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else {\n        if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    var materialCreator = new THREE.MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n};\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function (baseUrl, options) {\n  this.baseUrl = baseUrl || '';\n  this.options = options;\n  this.materialsInfo = {};\n  this.materials = {};\n  this.materialsArray = [];\n  this.nameLookup = {};\n  this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n  this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n  constructor: THREE.MTLLoader.MaterialCreator,\n  crossOrigin: 'anonymous',\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  setManager: function (value) {\n    this.manager = value;\n  },\n  setMaterials: function (materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n  convert: function (materialsInfo) {\n    if (!this.options) return materialsInfo;\n    var converted = {};\n\n    for (var mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      var mat = materialsInfo[mn];\n      var covmat = {};\n      converted[mn] = covmat;\n\n      for (var prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n  preload: function () {\n    for (var mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n  getIndex: function (materialName) {\n    return this.nameLookup[materialName];\n  },\n  getAsArray: function () {\n    var index = 0;\n\n    for (var mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n  create: function (materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n  createMaterial_: function (materialName) {\n    // Create material\n    var scope = this;\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      var texParams = scope.getTextureParams(value, params);\n      var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (var prop in mat) {\n      var value = mat[prop];\n      var n;\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new THREE.Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new THREE.Color().fromArray(value);\n          break;\n\n        case 'ke':\n          // Emissive using RGB values\n          params.emissive = new THREE.Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          setMapForType(\"map\", value);\n          break;\n\n        case 'map_ks':\n          // Specular map\n          setMapForType(\"specularMap\", value);\n          break;\n\n        case 'map_ke':\n          // Emissive map\n          setMapForType(\"emissiveMap\", value);\n          break;\n\n        case 'norm':\n          setMapForType(\"normalMap\", value);\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          setMapForType(\"bumpMap\", value);\n          break;\n\n        case 'map_d':\n          // Alpha map\n          setMapForType(\"alphaMap\", value);\n          params.transparent = true;\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n  getTextureParams: function (value, matParams) {\n    var texParams = {\n      scale: new THREE.Vector2(1, 1),\n      offset: new THREE.Vector2(0, 0)\n    };\n    var items = value.split(/\\s+/);\n    var pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  },\n  loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var loader = THREE.Loader.Handlers.get(url);\n    var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n    if (loader === null) {\n      loader = new THREE.TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n};","map":{"version":3,"sources":["C:/Users/Em/Desktop/New-the-frog/node_modules/three/examples/js/loaders/MTLLoader.js"],"names":["THREE","MTLLoader","manager","undefined","DefaultLoadingManager","prototype","constructor","crossOrigin","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","parse","setResourcePath","resourcePath","setTexturePath","console","warn","setCrossOrigin","value","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","get","TextureLoader"],"mappings":"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","sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.MTLLoader.prototype = {\n\n\tconstructor: THREE.MTLLoader,\n\n\tcrossOrigin: 'anonymous',\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( this.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * Set base path for resolving references.\n\t * If set this path will be prepended to each loaded and found reference.\n\t *\n\t * @see setResourcePath\n\t * @param {String} path\n\t * @return {THREE.MTLLoader}\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetPath: function ( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Set base path for additional resources like textures.\n\t *\n\t * @see setPath\n\t * @param {String} path\n\t * @return {THREE.MTLLoader}\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.setResourcePath( 'assets/textures/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetResourcePath: function ( path ) {\n\n\t\tthis.resourcePath = path;\n\t\treturn this;\n\n\t},\n\n\tsetTexturePath: function ( path ) {\n\n\t\tconsole.warn( 'THREE.MTLLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\treturn this.setResourcePath( path );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse: function ( text, path ) {\n\n\t\tvar lines = text.split( '\\n' );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl || '';\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\tcrossOrigin: 'anonymous',\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function ( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function ( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function ( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function () {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar scope = this;\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\t\t\tvar n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( \"map\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( \"emissiveMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( \"alphaMap\", value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tgetTextureParams: function ( value, matParams ) {\n\n\t\tvar texParams = {\n\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\toffset: new THREE.Vector2( 0, 0 )\n\n\t\t };\n\n\t\tvar items = value.split( /\\s+/ );\n\t\tvar pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t},\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar loader = THREE.Loader.Handlers.get( url );\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n"]},"metadata":{},"sourceType":"script"}