{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Em\\\\Desktop\\\\New-the-frog\\\\src\\\\components\\\\threejs_canvas.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport ButtonComponent from \"./ButtonComponent\";\nimport threeEntryPoint from \"./frog/three_entry_point\";\nimport { organsOfFrog } from \"./anatomy_config\";\nimport FullscreenElement from \"./fullscreen_button\";\n\nclass CanvasThreeJs extends Component {\n  constructor() {\n    super();\n    this.state = {\n      assetLoaded: 0\n    };\n\n    this.resizeFn = () => {};\n\n    this.assetsLoadingTracker = this.assetsLoadingTracker.bind(this);\n  }\n\n  componentDidMount() {\n    this.timeout = setTimeout(() => {\n      const humanSystem = { ...this.props\n      };\n      delete humanSystem.dispatch;\n      this.entryPoint = new threeEntryPoint(this.threeRootElement, humanSystem, this.assetsLoadingTracker, organsOfFrog());\n\n      if (this.entryPoint.sceneManager) {\n        this.resizeFn = this.entryPoint.sceneManager.onWindowResize;\n      }\n\n      clearTimeout(this.timeout);\n    }, 1000);\n  }\n\n  componentDidUpdate(nextProps) {\n    const newHumanSystem = { ...nextProps\n    };\n    delete newHumanSystem.dispatch;\n\n    if (this.entryPoint) {\n      this.entryPoint.upDateSystem(newHumanSystem);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.entryPoint) {\n      this.entryPoint.dispose();\n    }\n  }\n\n  assetsLoadingTracker(loaded) {\n    this.setState({\n      assetLoaded: Math.floor(loaded)\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, this.state.assetLoaded === 100 ? null : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cssload-loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cssload-inner cssload-one\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cssload-inner cssload-two\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cssload-inner cssload-three\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: this.state.assetLoaded === 100 ? \"block\" : \"none\",\n        width: \"100%\"\n      },\n      className: \"header-header anatomy-canvas\",\n      ref: element => this.threeRootElement = element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ButtonComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FullscreenElement, {\n      fullscreenElementClass: \"anatomy-container\",\n      fnCall: this.resizeFn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"tooltipCanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nCanvasThreeJs.propTypes = {\n  Skin: PropTypes.bool.isRequired,\n  Skeleton: PropTypes.bool.isRequired,\n  Muscles: PropTypes.bool.isRequired,\n  Nervous: PropTypes.bool.isRequired,\n  Heart: PropTypes.bool.isRequired,\n  Lungs: PropTypes.bool.isRequired,\n  Stomach: PropTypes.bool.isRequired\n};\n\nfunction mapStateToProps(_ref) {\n  let {\n    anatomy\n  } = _ref;\n  return { ...anatomy\n  };\n}\n\nexport default connect(mapStateToProps)(CanvasThreeJs);","map":{"version":3,"sources":["C:/Users/Em/Desktop/New-the-frog/src/components/threejs_canvas.js"],"names":["React","Component","Fragment","PropTypes","connect","ButtonComponent","threeEntryPoint","organsOfFrog","FullscreenElement","CanvasThreeJs","constructor","state","assetLoaded","resizeFn","assetsLoadingTracker","bind","componentDidMount","timeout","setTimeout","humanSystem","props","dispatch","entryPoint","threeRootElement","sceneManager","onWindowResize","clearTimeout","componentDidUpdate","nextProps","newHumanSystem","upDateSystem","componentWillUnmount","dispose","loaded","setState","Math","floor","render","display","width","element","propTypes","Skin","bool","isRequired","Skeleton","Muscles","Nervous","Heart","Lungs","Stomach","mapStateToProps","anatomy"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ButtonComponent from \"./ButtonComponent\";\r\nimport threeEntryPoint from \"./frog/three_entry_point\";\r\nimport { organsOfFrog } from \"./anatomy_config\";\r\nimport FullscreenElement from \"./fullscreen_button\";\r\n\r\nclass CanvasThreeJs extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      assetLoaded: 0\r\n    };\r\n    this.resizeFn = () => { };\r\n    this.assetsLoadingTracker = this.assetsLoadingTracker.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.timeout = setTimeout(() => {\r\n      const humanSystem = { ...this.props };\r\n      delete humanSystem.dispatch;\r\n      this.entryPoint = new threeEntryPoint(\r\n        this.threeRootElement,\r\n        humanSystem,\r\n        this.assetsLoadingTracker,\r\n        organsOfFrog()\r\n      );\r\n      if (this.entryPoint.sceneManager) {\r\n        this.resizeFn = this.entryPoint.sceneManager.onWindowResize;\r\n      }\r\n      clearTimeout(this.timeout);\r\n    }, 1000);\r\n  }\r\n  componentDidUpdate(nextProps) {\r\n    const newHumanSystem = { ...nextProps };\r\n    delete newHumanSystem.dispatch;\r\n    if (this.entryPoint) {\r\n      this.entryPoint.upDateSystem(newHumanSystem);\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.entryPoint) {\r\n      this.entryPoint.dispose();\r\n    }\r\n  }\r\n  assetsLoadingTracker(loaded) {\r\n    this.setState({\r\n      assetLoaded: Math.floor(loaded)\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.state.assetLoaded === 100 ? null : (\r\n          <div className=\"cssload-loader\">\r\n            <div className=\"cssload-inner cssload-one\" />\r\n            <div className=\"cssload-inner cssload-two\" />\r\n            <div className=\"cssload-inner cssload-three\" />\r\n          </div>\r\n        )}\r\n        <div\r\n          style={{\r\n            display: this.state.assetLoaded === 100 ? \"block\" : \"none\",\r\n            width: \"100%\"\r\n          }}\r\n          className=\"header-header anatomy-canvas\"\r\n          ref={element => (this.threeRootElement = element)}\r\n        >\r\n          <ButtonComponent />\r\n          <FullscreenElement\r\n            fullscreenElementClass={\"anatomy-container\"}\r\n            fnCall={this.resizeFn}\r\n          />\r\n          <canvas id={\"tooltipCanvas\"} />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nCanvasThreeJs.propTypes = {\r\n  Skin: PropTypes.bool.isRequired,\r\n  Skeleton: PropTypes.bool.isRequired,\r\n  Muscles: PropTypes.bool.isRequired,\r\n  Nervous: PropTypes.bool.isRequired,\r\n  Heart: PropTypes.bool.isRequired,\r\n  Lungs: PropTypes.bool.isRequired,\r\n  Stomach: PropTypes.bool.isRequired\r\n};\r\n\r\nfunction mapStateToProps({ anatomy }) {\r\n  return {\r\n    ...anatomy\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(CanvasThreeJs);\r\n"]},"metadata":{},"sourceType":"module"}