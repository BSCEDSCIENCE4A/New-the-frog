{"ast":null,"code":"import THREE from \"../three\";\nimport CreateRenderer from \"./create_renderer\";\nimport CreateTooltip from \"./create_tooltip\";\n\nclass SceneManager extends CreateRenderer {\n  constructor(canvas, screenDimensions, humanSystem, assetsLoadingTracker, organsOfFrog) {\n    super(canvas, assetsLoadingTracker);\n    this.mousePosition = {\n      x: 0,\n      y: 0\n    };\n    this.canvas = canvas;\n    this.humanSystem = humanSystem;\n    this.organsOfFrog = organsOfFrog;\n    this.screenDimensions = screenDimensions;\n    this.onWindowResize = this.onWindowResize.bind(this);\n    this.scene = super.buildScene();\n    this.renderer = super.buildRender(screenDimensions);\n    this.camera = super.buildCamera(screenDimensions);\n    this.sceneSubjects = super.createSceneSubjects(this.scene);\n    const {\n      light,\n      subject\n    } = this.sceneSubjects;\n    this.light = light;\n    this.subject = subject;\n    this.raycaster = new THREE.Raycaster();\n    this.INTERSECTED = null;\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.createTooltip = new CreateTooltip();\n    window.scene = this.scene;\n  }\n\n  update() {\n    if (this.scene) {\n      this.subject.update(this.humanSystem);\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  dispose() {\n    this.subject = null;\n    delete this.subject;\n    this.scene = null;\n    delete this.scene;\n  }\n\n  onWindowResize() {\n    let rect = null;\n    rect = this.canvas.parentElement.parentElement.getBoundingClientRect();\n    const width = rect.width;\n    const height = rect.width * 9 / 16;\n    this.screenDimensions.width = width;\n    this.screenDimensions.height = height;\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n  }\n\n  onMouseMove(e) {\n    e.preventDefault();\n    let _X = 0;\n    let _Y = 0;\n    _X = e.clientX - this.canvas.getBoundingClientRect().left;\n    _Y = e.clientY - this.canvas.getBoundingClientRect().top;\n    this.mousePosition.x = _X / this.screenDimensions.width * 2 - 1;\n    this.mousePosition.y = -(_Y / this.screenDimensions.height) * 2 + 1;\n    this.exploreParts(_X, _Y);\n  }\n\n  onTouchStart(e) {\n    let _X = 0;\n    let _Y = 0;\n    _X = e.changedTouches[0].clientX - this.canvas.getBoundingClientRect().left;\n    _Y = e.changedTouches[0].clientY - this.canvas.getBoundingClientRect().top;\n    this.mousePosition.x = _X / this.screenDimensions.width * 2 - 1;\n    this.mousePosition.y = -(_Y / this.screenDimensions.height) * 2 + 1;\n    this.exploreParts(_X, _Y);\n  }\n\n  exploreParts(x, y) {\n    this.raycaster.setFromCamera(this.mousePosition, this.camera);\n    this.intersects = this.raycaster.intersectObjects(this.subject.intersectingPart);\n\n    if (this.intersects.length > 0) {\n      if (this.INTERSECTED !== this.intersects[0].object) {\n        this.INTERSECTED = this.intersects[0].object;\n        this.createTooltip.tooltip(x, y, this.INTERSECTED.displayName);\n      }\n    } else {\n      this.INTERSECTED = null;\n      if (this.createTooltip.context1) this.createTooltip.context1.clearRect(0, 0, 640, 480);\n    }\n  }\n\n}\n\nexport default SceneManager;","map":{"version":3,"sources":["C:/Users/Em/Desktop/THe Frog v3/src/components/frog/scene_manager.js"],"names":["THREE","CreateRenderer","CreateTooltip","SceneManager","constructor","canvas","screenDimensions","humanSystem","assetsLoadingTracker","organsOfFrog","mousePosition","x","y","onWindowResize","bind","scene","buildScene","renderer","buildRender","camera","buildCamera","sceneSubjects","createSceneSubjects","light","subject","raycaster","Raycaster","INTERSECTED","onMouseMove","onTouchStart","createTooltip","window","update","render","dispose","rect","parentElement","getBoundingClientRect","width","height","aspect","updateProjectionMatrix","setSize","e","preventDefault","_X","_Y","clientX","left","clientY","top","exploreParts","changedTouches","setFromCamera","intersects","intersectObjects","intersectingPart","length","object","tooltip","displayName","context1","clearRect"],"mappings":"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","sourcesContent":["import THREE from \"../three\";\n\nimport CreateRenderer from \"./create_renderer\";\nimport CreateTooltip from \"./create_tooltip\";\n\nclass SceneManager extends CreateRenderer {\n  constructor(\n    canvas,\n    screenDimensions,\n    humanSystem,\n    assetsLoadingTracker,\n    organsOfFrog\n  ) {\n    super(canvas, assetsLoadingTracker);\n    this.mousePosition = {\n      x: 0,\n      y: 0\n    };\n    this.canvas = canvas;\n    this.humanSystem = humanSystem;\n    this.organsOfFrog = organsOfFrog;\n    this.screenDimensions = screenDimensions;\n    this.onWindowResize = this.onWindowResize.bind(this);\n    this.scene = super.buildScene();\n    this.renderer = super.buildRender(screenDimensions);\n    this.camera = super.buildCamera(screenDimensions);\n    this.sceneSubjects = super.createSceneSubjects(this.scene);\n    const { light, subject } = this.sceneSubjects;\n    this.light = light;\n    this.subject = subject;\n\n    this.raycaster = new THREE.Raycaster();\n    this.INTERSECTED = null;\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n\n    this.createTooltip = new CreateTooltip();\n\n    window.scene = this.scene;\n  }\n  update() {\n    if (this.scene) {\n      this.subject.update(this.humanSystem);\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n  dispose() {\n    this.subject = null;\n    delete this.subject;\n    this.scene = null;\n    delete this.scene;\n  }\n  onWindowResize() {\n    let rect = null;\n    rect = this.canvas.parentElement.parentElement.getBoundingClientRect();\n    const width = rect.width;\n    const height = (rect.width * 9) / 16;\n    this.screenDimensions.width = width;\n    this.screenDimensions.height = height;\n\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n  }\n\n  onMouseMove(e) {\n    e.preventDefault();\n    let _X = 0;\n    let _Y = 0;\n    _X = e.clientX - this.canvas.getBoundingClientRect().left;\n    _Y = e.clientY - this.canvas.getBoundingClientRect().top;\n    this.mousePosition.x = (_X / this.screenDimensions.width) * 2 - 1;\n    this.mousePosition.y = -(_Y / this.screenDimensions.height) * 2 + 1;\n    this.exploreParts(_X, _Y);\n  }\n  onTouchStart(e) {\n    let _X = 0;\n    let _Y = 0;\n    _X = e.changedTouches[0].clientX - this.canvas.getBoundingClientRect().left;\n    _Y = e.changedTouches[0].clientY - this.canvas.getBoundingClientRect().top;\n    this.mousePosition.x = (_X / this.screenDimensions.width) * 2 - 1;\n    this.mousePosition.y = -(_Y / this.screenDimensions.height) * 2 + 1;\n    this.exploreParts(_X, _Y);\n  }\n\n  exploreParts(x, y) {\n    this.raycaster.setFromCamera(this.mousePosition, this.camera);\n    this.intersects = this.raycaster.intersectObjects(\n      this.subject.intersectingPart\n    );\n    if (this.intersects.length > 0) {\n      if (this.INTERSECTED !== this.intersects[0].object) {\n        this.INTERSECTED = this.intersects[0].object;\n        this.createTooltip.tooltip(x, y, this.INTERSECTED.displayName);\n      }\n    } else {\n      this.INTERSECTED = null;\n      if (this.createTooltip.context1)\n        this.createTooltip.context1.clearRect(0, 0, 640, 480);\n    }\n  }\n}\n\nexport default SceneManager;\n"]},"metadata":{},"sourceType":"module"}