{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\nTHREE.RenderableObject = function () {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nTHREE.RenderableFace = function () {\n  this.id = 0;\n  this.v1 = new THREE.RenderableVertex();\n  this.v2 = new THREE.RenderableVertex();\n  this.v3 = new THREE.RenderableVertex();\n  this.normalModel = new THREE.Vector3();\n  this.vertexNormalsModel = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new THREE.Color();\n  this.material = null;\n  this.uvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nTHREE.RenderableVertex = function () {\n  this.position = new THREE.Vector3();\n  this.positionWorld = new THREE.Vector3();\n  this.positionScreen = new THREE.Vector4();\n  this.visible = true;\n};\n\nTHREE.RenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\n\nTHREE.RenderableLine = function () {\n  this.id = 0;\n  this.v1 = new THREE.RenderableVertex();\n  this.v2 = new THREE.RenderableVertex();\n  this.vertexColors = [new THREE.Color(), new THREE.Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nTHREE.RenderableSprite = function () {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new THREE.Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\n\nTHREE.Projector = function () {\n  var _object,\n      _objectCount,\n      _objectPool = [],\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPool = [],\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePool = [],\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePool = [],\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePool = [],\n      _spritePoolLength = 0,\n      _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new THREE.Vector3(),\n      _vector4 = new THREE.Vector4(),\n      _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)),\n      _boundingBox = new THREE.Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new THREE.Matrix4(),\n      _viewProjectionMatrix = new THREE.Matrix4(),\n      _modelMatrix,\n      _modelViewProjectionMatrix = new THREE.Matrix4(),\n      _normalMatrix = new THREE.Matrix3(),\n      _frustum = new THREE.Frustum(),\n      _clippedVertex1PositionScreen = new THREE.Vector4(),\n      _clippedVertex2PositionScreen = new THREE.Vector4(); //\n\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n\n  var RenderList = function () {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var material = null;\n    var normalMatrix = new THREE.Matrix3();\n\n    function setObject(value) {\n      object = value;\n      material = object.material;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors === THREE.VertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (var i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors === THREE.FaceColors || material.vertexColors === THREE.VertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object instanceof THREE.Light) {\n      _renderData.lights.push(object);\n    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object instanceof THREE.Sprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromMatrix(_viewProjectionMatrix); //\n\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n\n    var objects = _renderData.objects;\n\n    for (var o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object instanceof THREE.Mesh) {\n        if (geometry instanceof THREE.BufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n\n          for (var i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n                x += (target.getX(i / 3) - positions[i]) * influence;\n                y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n              }\n            }\n\n            renderList.pushVertex(x, y, z);\n          }\n\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n\n            for (var i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n\n            for (var i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n\n            for (var i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n\n            if (groups.length > 0) {\n              for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (var i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (geometry instanceof THREE.Geometry) {\n          var vertices = geometry.vertices;\n          var faces = geometry.faces;\n          var faceVertexUvs = geometry.faceVertexUvs[0];\n\n          _normalMatrix.getNormalMatrix(_modelMatrix);\n\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n\n          for (var v = 0, vl = vertices.length; v < vl; v++) {\n            var vertex = vertices[v];\n\n            _vector3.copy(vertex);\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphTargets;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n                var targetVertex = target.vertices[v];\n                _vector3.x += (targetVertex.x - vertex.x) * influence;\n                _vector3.y += (targetVertex.y - vertex.y) * influence;\n                _vector3.z += (targetVertex.z - vertex.z) * influence;\n              }\n            }\n\n            renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n          }\n\n          for (var f = 0, fl = faces.length; f < fl; f++) {\n            var face = faces[f];\n            material = isMultiMaterial === true ? object.material[face.materialIndex] : object.material;\n            if (material === undefined) continue;\n            var side = material.side;\n            var v1 = _vertexPool[face.a];\n            var v2 = _vertexPool[face.b];\n            var v3 = _vertexPool[face.c];\n            if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n            var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\n            if (side !== THREE.DoubleSide) {\n              if (side === THREE.FrontSide && visible === false) continue;\n              if (side === THREE.BackSide && visible === true) continue;\n            }\n\n            _face = getNextFaceInPool();\n            _face.id = object.id;\n\n            _face.v1.copy(v1);\n\n            _face.v2.copy(v2);\n\n            _face.v3.copy(v3);\n\n            _face.normalModel.copy(face.normal);\n\n            if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n              _face.normalModel.negate();\n            }\n\n            _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\n            var faceVertexNormals = face.vertexNormals;\n\n            for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n              var normalModel = _face.vertexNormalsModel[n];\n              normalModel.copy(faceVertexNormals[n]);\n\n              if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                normalModel.negate();\n              }\n\n              normalModel.applyMatrix3(_normalMatrix).normalize();\n            }\n\n            _face.vertexNormalsLength = faceVertexNormals.length;\n            var vertexUvs = faceVertexUvs[f];\n\n            if (vertexUvs !== undefined) {\n              for (var u = 0; u < 3; u++) {\n                _face.uvs[u].copy(vertexUvs[u]);\n              }\n            }\n\n            _face.color = face.color;\n            _face.material = material;\n            _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n            _face.renderOrder = object.renderOrder;\n\n            _renderData.elements.push(_face);\n          }\n        }\n      } else if (object instanceof THREE.Line) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry instanceof THREE.BufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n\n              for (var i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              for (var i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              var step = object instanceof THREE.LineSegments ? 2 : 1;\n\n              for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (geometry instanceof THREE.Geometry) {\n          var vertices = object.geometry.vertices;\n          if (vertices.length === 0) continue;\n          v1 = getNextVertexInPool();\n          v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n          var step = object instanceof THREE.LineSegments ? 2 : 1;\n\n          for (var v = 1, vl = vertices.length; v < vl; v++) {\n            v1 = getNextVertexInPool();\n            v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n            if ((v + 1) % step > 0) continue;\n            v2 = _vertexPool[_vertexCount - 2];\n\n            _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\n            _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\n            if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n              // Perform the perspective divide\n              _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\n              _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\n              _line = getNextLineInPool();\n              _line.id = object.id;\n\n              _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\n              _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\n              _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n              _line.renderOrder = object.renderOrder;\n              _line.material = object.material;\n\n              if (object.material.vertexColors === THREE.VertexColors) {\n                _line.vertexColors[0].copy(object.geometry.colors[v]);\n\n                _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n              }\n\n              _renderData.elements.push(_line);\n            }\n          }\n        }\n      } else if (object instanceof THREE.Points) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry instanceof THREE.Geometry) {\n          var vertices = object.geometry.vertices;\n\n          for (var v = 0, vl = vertices.length; v < vl; v++) {\n            var vertex = vertices[v];\n\n            _vector4.set(vertex.x, vertex.y, vertex.z, 1);\n\n            _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n            pushPoint(_vector4, object, camera);\n          }\n        } else if (geometry instanceof THREE.BufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object instanceof THREE.Sprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new THREE.RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new THREE.RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new THREE.RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new THREE.RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new THREE.RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  } //\n\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1,\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n    // Z = -1 and Z = +1, respectively.\n    bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Em/Desktop/THe Frog v3/node_modules/three/examples/js/renderers/Projector.js"],"names":["THREE","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","Vector3","vertexNormalsModel","vertexNormalsLength","color","Color","material","uvs","Vector2","position","positionWorld","positionScreen","Vector4","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","Box3","_boundingBox","_points3","Array","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","Matrix3","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","RenderList","normals","colors","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","VertexColors","fromArray","pushTriangle","c","side","DoubleSide","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","FaceColors","renderList","projectObject","Light","Mesh","Line","Points","frustumCulled","intersectsObject","addObject","Sprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromMatrix","sort","painterSort","o","ol","geometry","BufferGeometry","isMultiMaterial","isArray","attributes","groups","undefined","positions","array","morphTargets","morphAttributes","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","Geometry","vertices","faces","faceVertexUvs","v","vl","targetVertex","f","fl","face","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","n","nl","min","vertexUvs","u","step","LineSegments","pushPoint","modelViewMatrix","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar colors = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tcolors.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushColor( r, g, b ) {\n\n\t\t\tcolors.push( r, g, b );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t// Clip\n\n\t\t\tv1.positionScreen.copy( v1.position ).applyMatrix4( _modelViewProjectionMatrix );\n\t\t\tv2.positionScreen.copy( v2.position ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\tif ( clipLine( v1.positionScreen, v2.positionScreen ) === true ) {\n\n\t\t\t\t// Perform the perspective divide\n\t\t\t\tv1.positionScreen.multiplyScalar( 1 / v1.positionScreen.w );\n\t\t\t\tv2.positionScreen.multiplyScalar( 1 / v2.positionScreen.w );\n\n\t\t\t\t_line = getNextLineInPool();\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = Math.max( v1.positionScreen.z, v2.positionScreen.z );\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t_line.material = object.material;\n\n\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t_line.vertexColors[ 0 ].fromArray( colors, a * 3 );\n\t\t\t\t\t_line.vertexColors[ 1 ].fromArray( colors, b * 3 );\n\n\t\t\t\t}\n\n\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c, material ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// face normal\n\t\t\t\t_vector3.subVectors( v3.position, v2.position );\n\t\t\t\t_vector4.subVectors( v1.position, v2.position );\n\t\t\t\t_vector3.cross( _vector4 );\n\t\t\t\t_face.normalModel.copy( _vector3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = material;\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors || material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t_face.color.fromArray( colors, a * 3 );\n\n\t\t\t\t}\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushColor: pushColor,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t};\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tfunction projectObject( object ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t_renderData.lights.push( object );\n\n\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction addObject( object ) {\n\n\t\t_object = getNextObjectInPool();\n\t\t_object.id = object.id;\n\t\t_object.object = object;\n\n\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\t\t_object.z = _vector3.z;\n\t\t_object.renderOrder = object.renderOrder;\n\n\t\t_renderData.objects.push( _object );\n\n\t}\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tprojectObject( scene );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tvar objects = _renderData.objects;\n\n\t\tfor ( var o = 0, ol = objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\tvar x = positions[ i ];\n\t\t\t\t\t\tvar y = positions[ i + 1 ];\n\t\t\t\t\t\tvar z = positions[ i + 2 ];\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphAttributes.position;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\n\t\t\t\t\t\t\t\tx += ( target.getX( i / 3 ) - positions[ i ] ) * influence;\n\t\t\t\t\t\t\t\ty += ( target.getY( i / 3 ) - positions[ i + 1 ] ) * influence;\n\t\t\t\t\t\t\t\tz += ( target.getZ( i / 3 ) - positions[ i + 2 ] ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( x, y, z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t ? object.material[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector4.set( vertex.x, vertex.y, vertex.z, 1 );\n\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t_vector4.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1 );\n\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\tfunction pushPoint( _vector4, object, camera ) {\n\n\t\tvar invW = 1 / _vector4.w;\n\n\t\t_vector4.z *= invW;\n\n\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t_sprite.id = object.id;\n\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t_sprite.z = _vector4.z;\n\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t_sprite.object = object;\n\n\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t_sprite.material = object.material;\n\n\t\t\t_renderData.elements.push( _sprite );\n\n\t\t}\n\n\t}\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\n\t\t\tbc1near = s1.z + s1.w,\n\t\t\tbc2near = s2.z + s2.w,\n\t\t\tbc1far = - s1.z + s1.w,\n\t\t\tbc2far = - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n"]},"metadata":{},"sourceType":"script"}