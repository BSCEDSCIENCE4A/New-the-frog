{"ast":null,"code":"import THREE from \"../three\";\nimport BackgroundImg from \"../../media/anatomy/bg.jpg\";\nimport SceneSubject from \"./scene_subject\";\nimport GeneralLights from \"./general_lights\";\n\nclass CreateRenderer {\n  constructor(canvas, assetsLoadingTracker) {\n    this.canvas = canvas;\n    this.manager = this.loadAssets();\n    this.assetsLoadingTracker = assetsLoadingTracker;\n  }\n\n  loadAssets() {\n    const manager = new THREE.LoadingManager();\n\n    manager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      this.loadedValue = itemsLoaded / itemsTotal * 100;\n      this.assetsLoadingTracker(this.loadedValue);\n    };\n\n    manager.onError = url => {\n      console.log(\"There was an error loading \" + url);\n    };\n\n    return manager;\n  }\n\n  buildScene() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.TextureLoader(this.manager).load(BackgroundImg);\n    return scene;\n  }\n\n  buildRender(_ref) {\n    let {\n      width,\n      height\n    } = _ref;\n    const renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width / 20, height / 20);\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    return renderer;\n  }\n\n  buildCamera(_ref2) {\n    let {\n      width,\n      height\n    } = _ref2;\n    const aspectRatio = width / height;\n    const fieldOfView = 25;\n    const nearPlane = 0.1;\n    const farPlane = 10;\n    const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n    camera.position.z = 5;\n    camera.lookAt(new THREE.Vector3());\n    this.enableOrbitcontrols(camera);\n    return camera;\n  }\n\n  enableOrbitcontrols(camera) {\n    const controls = new THREE.OrbitControls(camera, this.canvas);\n    controls.minPolarAngle = -Math.PI / 2;\n    controls.maxPolarAngle = Math.PI / 2 + 0.1;\n    controls.minDistance = 5;\n    controls.maxDistance = 5;\n    controls.enablePan = false;\n  }\n\n  createSceneSubjects(scene) {\n    const sceneSubjects = {\n      subject: new SceneSubject(scene, this.manager),\n      light: new GeneralLights(scene)\n    };\n    return sceneSubjects;\n  }\n\n}\n\nexport default CreateRenderer;","map":{"version":3,"sources":["C:/Users/Em/Desktop/THe Frog v3/src/components/frog/create_renderer.js"],"names":["THREE","BackgroundImg","SceneSubject","GeneralLights","CreateRenderer","constructor","canvas","assetsLoadingTracker","manager","loadAssets","LoadingManager","onProgress","url","itemsLoaded","itemsTotal","loadedValue","onError","console","log","buildScene","scene","Scene","background","TextureLoader","load","buildRender","width","height","renderer","WebGLRenderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","gammaInput","gammaOutput","buildCamera","aspectRatio","fieldOfView","nearPlane","farPlane","camera","PerspectiveCamera","position","z","lookAt","Vector3","enableOrbitcontrols","controls","OrbitControls","minPolarAngle","Math","PI","maxPolarAngle","minDistance","maxDistance","enablePan","createSceneSubjects","sceneSubjects","subject","light"],"mappings":"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","sourcesContent":["import THREE from \"../three\";\n\nimport BackgroundImg from \"../../media/anatomy/bg.jpg\";\n\nimport SceneSubject from \"./scene_subject\";\nimport GeneralLights from \"./general_lights\";\n\nclass CreateRenderer {\n  constructor(canvas, assetsLoadingTracker) {\n    this.canvas = canvas;\n    this.manager = this.loadAssets();\n    this.assetsLoadingTracker = assetsLoadingTracker;\n  }\n  loadAssets() {\n    const manager = new THREE.LoadingManager();\n    manager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      this.loadedValue = (itemsLoaded / itemsTotal) * 100;\n      this.assetsLoadingTracker(this.loadedValue);\n    };\n\n    manager.onError = url => {\n      console.log(\"There was an error loading \" + url);\n    };\n    return manager;\n  }\n  buildScene() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.TextureLoader(this.manager).load(\n      BackgroundImg\n    );\n\n    return scene;\n  }\n\n  buildRender({ width, height }) {\n    const renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width / 20, height / 20);\n\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n\n    return renderer;\n  }\n\n  buildCamera({ width, height }) {\n    const aspectRatio = width / height;\n    const fieldOfView = 25;\n    const nearPlane = 0.1;\n    const farPlane = 10;\n    const camera = new THREE.PerspectiveCamera(\n      fieldOfView,\n      aspectRatio,\n      nearPlane,\n      farPlane\n    );\n\n    camera.position.z = 5;\n    camera.lookAt(new THREE.Vector3());\n    this.enableOrbitcontrols(camera);\n\n    return camera;\n  }\n  enableOrbitcontrols(camera) {\n    const controls = new THREE.OrbitControls(camera, this.canvas);\n    controls.minPolarAngle = -Math.PI / 2;\n    controls.maxPolarAngle = Math.PI / 2 + 0.1;\n    controls.minDistance = 5;\n    controls.maxDistance = 5;\n    controls.enablePan = false;\n  }\n\n  createSceneSubjects(scene) {\n    const sceneSubjects = {\n      subject: new SceneSubject(scene, this.manager),\n      light: new GeneralLights(scene)\n    };\n\n    return sceneSubjects;\n  }\n}\n\nexport default CreateRenderer;\n"]},"metadata":{},"sourceType":"module"}