{"ast":null,"code":"import THREE from \"../three\";\nimport frogAnatomy from \"../../media/models/frog_nervous_web_internal_v2_06.fbx\";\nimport { anatomyConfig, partNames } from \"../anatomy_config\";\n\nclass SceneSubject {\n  constructor(scene, manager) {\n    this.canvas = document.getElementById(\"mainCanvas\");\n    this.scene = scene;\n    this.mesh = null;\n    this.groundMirror = null;\n    this.manager = manager;\n    this.loadedValue = 0;\n    this.intersectingPart = [];\n    this.createRotatingDisk();\n    this.createMesh();\n  }\n\n  createMesh() {\n    new THREE.FBXLoader(this.manager).load(frogAnatomy, object => {\n      this.mesh = object;\n      this.mesh.position.y = -0.7;\n      this.mesh.scale.set(0.02, 0.02, 0.02);\n      this.scene.add(this.mesh);\n      this.mesh.traverse(child => {\n        if (child.isMesh) {\n          child.displayName = partNames[child.name];\n          this.intersectingPart.push(child);\n        }\n      });\n    });\n  }\n\n  createRotatingDisk() {\n    var geometry = new THREE.CylinderGeometry(1.3, 1.3, 0.03, 64);\n    var material = new THREE.MeshPhongMaterial({\n      color: 0x2a2a2a,\n      shininess: 100\n    });\n    this.groundMirror = new THREE.Mesh(geometry, material);\n    this.groundMirror.name = \"RotatingDisk\";\n    this.groundMirror.position.y = -0.73;\n    this.scene.add(this.groundMirror);\n  }\n\n  update(humanSystem) {\n    if (this.mesh !== null) {\n      this.intersectingPart = [];\n      let selectName = [];\n      Object.keys(humanSystem).map(organ => {\n        anatomyConfig.map(org => {\n          if (org.id === organ) {\n            selectName = org.asName;\n          }\n        });\n        selectName.map(selected => {\n          const selectedObject = this.scene.getObjectByName(selected);\n\n          if (selectedObject !== undefined) {\n            if (selectedObject.name === \"frog_skin\") {\n              if (!humanSystem[organ]) {\n                selectedObject.material.transparent = true;\n                selectedObject.material.opacity = 0.25;\n              } else {\n                selectedObject.material.transparent = false;\n                selectedObject.material.opacity = 1;\n              }\n            } else {\n              selectedObject.visible = humanSystem[organ];\n            }\n          }\n        });\n      });\n      this.mesh.traverse(child => {\n        if (child.isMesh && child.visible && !child.material.transparent) {\n          this.intersectingPart.push(child);\n        }\n      });\n    }\n  }\n\n}\n\nexport default SceneSubject;","map":{"version":3,"sources":["C:/Users/Em/Desktop/New-the-frog/src/components/frog/scene_subject.js"],"names":["THREE","frogAnatomy","anatomyConfig","partNames","SceneSubject","constructor","scene","manager","canvas","document","getElementById","mesh","groundMirror","loadedValue","intersectingPart","createRotatingDisk","createMesh","FBXLoader","load","object","position","y","scale","set","add","traverse","child","isMesh","displayName","name","push","geometry","CylinderGeometry","material","MeshPhongMaterial","color","shininess","Mesh","update","humanSystem","selectName","Object","keys","map","organ","org","id","asName","selected","selectedObject","getObjectByName","undefined","transparent","opacity","visible"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAOC,WAAP,MAAwB,wDAAxB;AAEA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,mBAAzC;;AAEA,MAAMC,YAAN,CAAmB;AACjBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,SAAKC,MAAL,GAAcC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAd;AACA,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKK,IAAL,GAAY,IAAZ;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKL,OAAL,GAAeA,OAAf;AACA,SAAKM,WAAL,GAAmB,CAAnB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,kBAAL;AACA,SAAKC,UAAL;AACD;;AACDA,EAAAA,UAAU,GAAG;AACX,QAAIhB,KAAK,CAACiB,SAAV,CAAoB,KAAKV,OAAzB,EAAkCW,IAAlC,CAAuCjB,WAAvC,EAAoDkB,MAAM,IAAI;AAC5D,WAAKR,IAAL,GAAYQ,MAAZ;AACA,WAAKR,IAAL,CAAUS,QAAV,CAAmBC,CAAnB,GAAuB,CAAC,GAAxB;AACA,WAAKV,IAAL,CAAUW,KAAV,CAAgBC,GAAhB,CAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC;AACA,WAAKjB,KAAL,CAAWkB,GAAX,CAAe,KAAKb,IAApB;AACA,WAAKA,IAAL,CAAUc,QAAV,CAAmBC,KAAK,IAAI;AAC1B,YAAIA,KAAK,CAACC,MAAV,EAAkB;AAChBD,UAAAA,KAAK,CAACE,WAAN,GAAoBzB,SAAS,CAACuB,KAAK,CAACG,IAAP,CAA7B;AACA,eAAKf,gBAAL,CAAsBgB,IAAtB,CAA2BJ,KAA3B;AACD;AACF,OALD;AAMD,KAXD;AAYD;;AACDX,EAAAA,kBAAkB,GAAG;AACnB,QAAIgB,QAAQ,GAAG,IAAI/B,KAAK,CAACgC,gBAAV,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C,EAA3C,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIjC,KAAK,CAACkC,iBAAV,CAA4B;AACzCC,MAAAA,KAAK,EAAE,QADkC;AAEzCC,MAAAA,SAAS,EAAE;AAF8B,KAA5B,CAAf;AAIA,SAAKxB,YAAL,GAAoB,IAAIZ,KAAK,CAACqC,IAAV,CAAeN,QAAf,EAAyBE,QAAzB,CAApB;AACA,SAAKrB,YAAL,CAAkBiB,IAAlB,GAAyB,cAAzB;AACA,SAAKjB,YAAL,CAAkBQ,QAAlB,CAA2BC,CAA3B,GAA+B,CAAC,IAAhC;AACA,SAAKf,KAAL,CAAWkB,GAAX,CAAe,KAAKZ,YAApB;AACD;;AACD0B,EAAAA,MAAM,CAACC,WAAD,EAAc;AAClB,QAAI,KAAK5B,IAAL,KAAc,IAAlB,EAAwB;AACtB,WAAKG,gBAAL,GAAwB,EAAxB;AACA,UAAI0B,UAAU,GAAG,EAAjB;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6BC,KAAK,IAAI;AACpC1C,QAAAA,aAAa,CAACyC,GAAd,CAAkBE,GAAG,IAAI;AACvB,cAAIA,GAAG,CAACC,EAAJ,KAAWF,KAAf,EAAsB;AACpBJ,YAAAA,UAAU,GAAGK,GAAG,CAACE,MAAjB;AACD;AACF,SAJD;AAKAP,QAAAA,UAAU,CAACG,GAAX,CAAeK,QAAQ,IAAI;AACzB,gBAAMC,cAAc,GAAG,KAAK3C,KAAL,CAAW4C,eAAX,CAA2BF,QAA3B,CAAvB;;AACA,cAAIC,cAAc,KAAKE,SAAvB,EAAkC;AAChC,gBAAIF,cAAc,CAACpB,IAAf,KAAwB,WAA5B,EAAyC;AACvC,kBAAI,CAACU,WAAW,CAACK,KAAD,CAAhB,EAAyB;AACvBK,gBAAAA,cAAc,CAAChB,QAAf,CAAwBmB,WAAxB,GAAsC,IAAtC;AACAH,gBAAAA,cAAc,CAAChB,QAAf,CAAwBoB,OAAxB,GAAkC,IAAlC;AACD,eAHD,MAGO;AACLJ,gBAAAA,cAAc,CAAChB,QAAf,CAAwBmB,WAAxB,GAAsC,KAAtC;AACAH,gBAAAA,cAAc,CAAChB,QAAf,CAAwBoB,OAAxB,GAAkC,CAAlC;AACD;AACF,aARD,MAQO;AACLJ,cAAAA,cAAc,CAACK,OAAf,GAAyBf,WAAW,CAACK,KAAD,CAApC;AACD;AACF;AACF,SAfD;AAgBD,OAtBD;AAuBA,WAAKjC,IAAL,CAAUc,QAAV,CAAmBC,KAAK,IAAI;AAC1B,YAAIA,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAAC4B,OAAtB,IAAiC,CAAC5B,KAAK,CAACO,QAAN,CAAemB,WAArD,EAAkE;AAChE,eAAKtC,gBAAL,CAAsBgB,IAAtB,CAA2BJ,KAA3B;AACD;AACF,OAJD;AAKD;AACF;;AAtEgB;;AAyEnB,eAAetB,YAAf","sourcesContent":["import THREE from \"../three\";\n\nimport frogAnatomy from \"../../media/models/frog_nervous_web_internal_v2_06.fbx\";\n\nimport { anatomyConfig, partNames } from \"../anatomy_config\";\n\nclass SceneSubject {\n  constructor(scene, manager) {\n    this.canvas = document.getElementById(\"mainCanvas\");\n    this.scene = scene;\n    this.mesh = null;\n    this.groundMirror = null;\n    this.manager = manager;\n    this.loadedValue = 0;\n    this.intersectingPart = [];\n    this.createRotatingDisk();\n    this.createMesh();\n  }\n  createMesh() {\n    new THREE.FBXLoader(this.manager).load(frogAnatomy, object => {\n      this.mesh = object;\n      this.mesh.position.y = -0.7;\n      this.mesh.scale.set(0.02, 0.02, 0.02);\n      this.scene.add(this.mesh);\n      this.mesh.traverse(child => {\n        if (child.isMesh) {\n          child.displayName = partNames[child.name];\n          this.intersectingPart.push(child);\n        }\n      });\n    });\n  }\n  createRotatingDisk() {\n    var geometry = new THREE.CylinderGeometry(1.3, 1.3, 0.03, 64);\n    var material = new THREE.MeshPhongMaterial({\n      color: 0x2a2a2a,\n      shininess: 100\n    });\n    this.groundMirror = new THREE.Mesh(geometry, material);\n    this.groundMirror.name = \"RotatingDisk\";\n    this.groundMirror.position.y = -0.73;\n    this.scene.add(this.groundMirror);\n  }\n  update(humanSystem) {\n    if (this.mesh !== null) {\n      this.intersectingPart = [];\n      let selectName = [];\n      Object.keys(humanSystem).map(organ => {\n        anatomyConfig.map(org => {\n          if (org.id === organ) {\n            selectName = org.asName;\n          }\n        });\n        selectName.map(selected => {\n          const selectedObject = this.scene.getObjectByName(selected);\n          if (selectedObject !== undefined) {\n            if (selectedObject.name === \"frog_skin\") {\n              if (!humanSystem[organ]) {\n                selectedObject.material.transparent = true;\n                selectedObject.material.opacity = 0.25;\n              } else {\n                selectedObject.material.transparent = false;\n                selectedObject.material.opacity = 1;\n              }\n            } else {\n              selectedObject.visible = humanSystem[organ];\n            }\n          }\n        });\n      });\n      this.mesh.traverse(child => {\n        if (child.isMesh && child.visible && !child.material.transparent) {\n          this.intersectingPart.push(child);\n        }\n      });\n    }\n  }\n}\n\nexport default SceneSubject;\n"]},"metadata":{},"sourceType":"module"}