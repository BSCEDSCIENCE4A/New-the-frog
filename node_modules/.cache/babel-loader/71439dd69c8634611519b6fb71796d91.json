{"ast":null,"code":"/**\n * @author Kyle-Larson https://github.com/Kyle-Larson\n * @author Takahiro https://github.com/takahirox\n * @author Lewy Blue https://github.com/looeee\n *\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\nTHREE.FBXLoader = function () {\n  var fbxTree;\n  var connections;\n  var sceneGraph;\n\n  function FBXLoader(manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  }\n\n  FBXLoader.prototype = {\n    constructor: FBXLoader,\n    crossOrigin: 'anonymous',\n    load: function (url, onLoad, onProgress, onError) {\n      var self = this;\n      var path = self.path === undefined ? THREE.LoaderUtils.extractUrlBase(url) : self.path;\n      var loader = new THREE.FileLoader(this.manager);\n      loader.setPath(self.path);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(self.parse(buffer, path));\n        } catch (error) {\n          setTimeout(function () {\n            if (onError) onError(error);\n            self.manager.itemError(url);\n          }, 0);\n        }\n      }, onProgress, onError);\n    },\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n    setResourcePath: function (value) {\n      this.resourcePath = value;\n      return this;\n    },\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n    parse: function (FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n\n      var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader).parse(fbxTree);\n    }\n  }; // Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\n  function FBXTreeParser(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n\n  FBXTreeParser.prototype = {\n    constructor: FBXTreeParser,\n    parse: function () {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    },\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n    parseConnections: function () {\n      var connectionMap = new Map();\n\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    },\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n    parseImages: function () {\n      var images = {};\n      var blobs = {};\n\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (var id in images) {\n        var filename = images[id];\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n      }\n\n      return images;\n    },\n    // Parse embedded image data in FBXTree.Video.Content\n    parseImage: function (videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n\n        case 'png':\n          type = 'image/png';\n          break;\n\n        case 'tif':\n          type = 'image/tiff';\n          break;\n\n        case 'tga':\n          if (THREE.Loader.Handlers.get('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n\n          type = 'image/tga';\n          break;\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    },\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n    parseTextures: function (images) {\n      var textureMap = new Map();\n\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    },\n    // Parse individual node in FBXTree.Objects.Texture\n    parseTexture: function (textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      return texture;\n    },\n    // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n    loadTexture: function (textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === 'tga') {\n        var loader = THREE.Loader.Handlers.get('.tga');\n\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new THREE.Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new THREE.Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    },\n    // Parse nodes in FBXTree.Objects.Material\n    parseMaterials: function (textureMap) {\n      var materialMap = new Map();\n\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    },\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n    parseMaterial: function (materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new THREE.MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new THREE.MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new THREE.MeshPhongMaterial();\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    },\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n    parseParameters: function (materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var self = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = self.getTexture(textureMap, child.ID);\n            parameters.map.encoding = THREE.sRGBEncoding;\n            break;\n\n          case 'DisplacementColor':\n            parameters.displacementMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'EmissiveColor':\n            parameters.emissiveMap = self.getTexture(textureMap, child.ID);\n            parameters.emissiveMap.encoding = THREE.sRGBEncoding;\n            break;\n\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = self.getTexture(textureMap, child.ID);\n            break;\n\n          case 'ReflectionColor':\n            parameters.envMap = self.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n            parameters.envMap.encoding = THREE.sRGBEncoding;\n            break;\n\n          case 'SpecularColor':\n            parameters.specularMap = self.getTexture(textureMap, child.ID);\n            parameters.specularMap.encoding = THREE.sRGBEncoding;\n            break;\n\n          case 'TransparentColor':\n            parameters.alphaMap = self.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    },\n    // get a texture from the textureMap for use by a material.\n    getTexture: function (textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    },\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n    parseDeformers: function () {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    },\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n    parseSkeleton: function (relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a) // transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    },\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n    parseMorphTargets: function (relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    },\n    // create the main THREE.Group() to be returned by the loader\n    parseScene: function (deformers, geometryMap, materialMap) {\n      sceneGraph = new THREE.Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var self = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        self.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix(transform);\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    },\n    // parse nodes in FBXTree.Objects.Model\n    parseModels: function (skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case 'LimbNode':\n            case 'Root':\n              model = new THREE.Bone();\n              break;\n\n            case 'Null':\n            default:\n              model = new THREE.Group();\n              break;\n          }\n\n          model.name = THREE.PropertyBinding.sanitizeNodeName(node.attrName);\n          model.ID = id;\n        }\n\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    },\n    buildSkeleton: function (relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (var ID in skeletons) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new THREE.Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = THREE.PropertyBinding.sanitizeNodeName(name);\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    },\n    // create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n    createCamera: function (relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n\n        var farClippingPlane = 1000;\n\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            // Orthographic\n            model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new THREE.Object3D();\n            break;\n        }\n      }\n\n      return model;\n    },\n    // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n    createLight: function (relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 0xffffff;\n\n        if (lightAttribute.Color !== undefined) {\n          color = new THREE.Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            // Point\n            model = new THREE.PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            // Directional\n            model = new THREE.DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = THREE.Math.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = THREE.Math.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.');\n            model = new THREE.PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    },\n    createMesh: function (relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new THREE.MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = THREE.VertexColors;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new THREE.SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new THREE.Mesh(geometry, material);\n      }\n\n      return model;\n    },\n    createCurve: function (relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new THREE.LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new THREE.Line(geometry, material);\n    },\n    // parse the model node for transform data\n    getTransformData: function (model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    },\n    setLookAtProperties: function (model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new THREE.Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    },\n    bindSkeleton: function (skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      for (var ID in skeletons) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    },\n    parsePoseNodes: function () {\n      var bindMatrices = {};\n\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    },\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n    createAmbientLight: function () {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new THREE.Color(r, g, b);\n          sceneGraph.add(new THREE.AmbientLight(color, 1));\n        }\n      }\n    },\n    setupMorphMaterials: function () {\n      var self = this;\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n            if (Array.isArray(child.material)) {\n              child.material.forEach(function (material, i) {\n                self.setupMorphMaterial(child, material, i);\n              });\n            } else {\n              self.setupMorphMaterial(child, child.material);\n            }\n          }\n        }\n      });\n    },\n    setupMorphMaterial: function (child, material, index) {\n      var uuid = child.uuid;\n      var matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n      var sharedMat = false;\n      sceneGraph.traverse(function (node) {\n        if (node.isMesh) {\n          if (Array.isArray(node.material)) {\n            node.material.forEach(function (mat) {\n              if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n            });\n          } else if (node.material.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n        }\n      });\n\n      if (sharedMat === true) {\n        var clonedMat = material.clone();\n        clonedMat.morphTargets = true;\n        if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n      } else material.morphTargets = true;\n    }\n  }; // parse Geometry data from FBXTree and return map of BufferGeometries\n\n  function GeometryParser() {}\n\n  GeometryParser.prototype = {\n    constructor: GeometryParser,\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse: function (deformers) {\n      var geometryMap = new Map();\n\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    },\n    // Parse single node in FBXTree.Objects.Geometry\n    parseGeometry: function (relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    },\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n    parseMeshGeometry: function (relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = deformers.morphTargets;\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      var morphTarget = relationships.children.reduce(function (morphTarget, child) {\n        if (morphTargets[child.ID] !== undefined) morphTarget = morphTargets[child.ID];\n        return morphTarget;\n      }, null); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTarget, transform);\n    },\n    // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n    genGeometry: function (geoNode, skeleton, morphTarget, preTransform) {\n      var geo = new THREE.BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n      preTransform.applyToBufferAttribute(positionAttribute);\n      geo.addAttribute('position', positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.addAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.addAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.addAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n        var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n        normalMatrix.applyToBufferAttribute(normalAttribute);\n        geo.addAttribute('normal', normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n\n        geo.addAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTarget, preTransform);\n      return geo;\n    },\n    parseGeoNode: function (geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    },\n    genBuffers: function (geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var self = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    },\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n    genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      for (var i = 2; i < faceLength; i++) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      }\n    },\n    addMorphTargets: function (parentGeo, parentGeoNode, morphTarget, preTransform) {\n      if (morphTarget === null) return;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var self = this;\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    },\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n    genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var morphGeo = new THREE.BufferGeometry();\n      if (morphGeoNode.attrName) morphGeo.name = morphGeoNode.attrName;\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : []; // make a copy of the parent's vertex positions\n\n      var vertexPositions = parentGeoNode.Vertices !== undefined ? parentGeoNode.Vertices.a.slice() : [];\n      var morphPositions = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3; // FBX format uses blend shapes rather than morph targets. This can be converted\n        // by additively combining the blend shape positions with the original geometry's positions\n\n        vertexPositions[morphIndex] += morphPositions[i * 3];\n        vertexPositions[morphIndex + 1] += morphPositions[i * 3 + 1];\n        vertexPositions[morphIndex + 2] += morphPositions[i * 3 + 2];\n      } // TODO: add morph normal support\n\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: vertexPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      preTransform.applyToBufferAttribute(positionAttribute);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    },\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n    parseNormals: function (NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n    parseUVs: function (UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n    parseVertexColors: function (ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n    parseMaterialIndices: function (MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n    parseNurbsGeometry: function (geoNode) {\n      if (THREE.NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new THREE.BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new THREE.BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (var i = 0; i < degree; ++i) {\n          controlPoints.push(controlPoints[i]);\n        }\n      }\n\n      var curve = new THREE.NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new THREE.BufferGeometry();\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n      return geometry;\n    }\n  }; // parse animation data from FBXTree\n\n  function AnimationParser() {}\n\n  AnimationParser.prototype = {\n    constructor: AnimationParser,\n    // take raw animation clips and turn them into three.js animation clips\n    parse: function () {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n\n      if (rawClips !== undefined) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n\n      return animationClips;\n    },\n    parseClips: function () {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n    parseAnimationCurveNodes: function () {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n    parseAnimationCurves: function (curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    },\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n    parseAnimationLayers: function (curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n\n      for (var nodeID in rawLayers) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                    var node = {\n                      modelName: THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName),\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new THREE.Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var modelID = connections.get(geoID).parents[0].ID;\n                  var rawModel = fbxTree.Objects.Model[modelID];\n                  var node = {\n                    modelName: THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName),\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n\n      return layersMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n    parseAnimStacks: function (layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    },\n    addClip: function (rawClip) {\n      var tracks = [];\n      var self = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(self.generateTracks(rawTracks));\n      });\n      return new THREE.AnimationClip(rawClip.name, -1, tracks);\n    },\n    generateTracks: function (rawTracks) {\n      var tracks = [];\n      var initialPosition = new THREE.Vector3();\n      var initialRotation = new THREE.Quaternion();\n      var initialScale = new THREE.Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    },\n    generateVectorTrack: function (modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n    },\n    generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(THREE.Math.degToRad);\n      }\n\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(THREE.Math.degToRad);\n      }\n\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(THREE.Math.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(THREE.Math.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new THREE.Euler().fromArray(preRotation);\n        preRotation = new THREE.Quaternion().setFromEuler(preRotation);\n      }\n\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(THREE.Math.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new THREE.Euler().fromArray(postRotation);\n        postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();\n      }\n\n      var quaternion = new THREE.Quaternion();\n      var euler = new THREE.Euler();\n      var quaternionValues = [];\n\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    },\n    generateMorphTrack: function (rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    },\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n    getTimesForAllAxes: function (curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them and remove duplicates\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }).filter(function (elem, index, array) {\n        return array.indexOf(elem) == index;\n      });\n      return times;\n    },\n    getKeyframeTrackValues: function (times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    },\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n    interpolateRotations: function (curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }; // parse an FBX file in ASCII format\n\n  function TextParser() {}\n\n  TextParser.prototype = {\n    constructor: TextParser,\n    getPrevNode: function () {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function () {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function () {\n      return this.currentProp;\n    },\n    pushStack: function (node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function () {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function (val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function (text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var self = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\n\n        if (matchBeginning) {\n          self.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          self.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          self.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          self.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    },\n    parseNodeBegin: function (line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    },\n    parseNodeAttr: function (attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function (line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function (line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    },\n    // parse \"Property70\"\n    parseNodeSpecialProperty: function (line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode()[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }; // Parse an FBX file in Binary format\n\n  function BinaryParser() {}\n\n  BinaryParser.prototype = {\n    constructor: BinaryParser,\n    parse: function (buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n      console.log('THREE.FBXLoader: FBX binary version: ' + version);\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function (reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    // recursively parse nodes until the end of the file is reached\n    parseNode: function (reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32(); // note: do not remove this even if you get a linter warning as it moves the buffer forward\n\n      var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    },\n    parseSubNode: function (name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n\n        node[innerPropName] = {\n          'type': innerPropType1,\n          'type2': innerPropType2,\n          'flag': innerPropFlag,\n          'value': innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    },\n    parseProperty: function (reader) {\n      var type = reader.getString(1);\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          if (typeof Zlib === 'undefined') {\n            console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js');\n          }\n\n          var inflate = new Zlib.Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(inflate.decompress().buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  };\n\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  BinaryReader.prototype = {\n    constructor: BinaryReader,\n    getOffset: function () {\n      return this.offset;\n    },\n    size: function () {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function (length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function () {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    },\n    getUint8: function () {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt16: function () {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt32: function () {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    },\n    getUint32: function () {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xFFFFFFFF;\n        low = ~low & 0xFFFFFFFF;\n        if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n        low = low + 1 & 0xFFFFFFFF;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getFloat32: function () {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    },\n    getFloat64: function () {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function (size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    },\n    getArrayBuffer: function (size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getString: function (size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }; // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  function FBXTree() {}\n\n  FBXTree.prototype = {\n    constructor: FBXTree,\n    add: function (key, val) {\n      this[key] = val;\n    }\n  }; // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n\n    for (var i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n\n  var dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    var index;\n\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    var from = index * infoObject.dataSize;\n    var to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n\n  var tempEuler = new THREE.Euler();\n  var tempVec = new THREE.Vector3(); // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\n  function generateTransform(transformData) {\n    var lTranslationM = new THREE.Matrix4();\n    var lPreRotationM = new THREE.Matrix4();\n    var lRotationM = new THREE.Matrix4();\n    var lPostRotationM = new THREE.Matrix4();\n    var lScalingM = new THREE.Matrix4();\n    var lScalingPivotM = new THREE.Matrix4();\n    var lScalingOffsetM = new THREE.Matrix4();\n    var lRotationOffsetM = new THREE.Matrix4();\n    var lRotationPivotM = new THREE.Matrix4();\n    var lParentGX = new THREE.Matrix4();\n    var lGlobalT = new THREE.Matrix4();\n    var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n    if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n    if (transformData.preRotation) {\n      var array = transformData.preRotation.map(THREE.Math.degToRad);\n      array.push(transformData.eulerOrder);\n      lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.rotation) {\n      var array = transformData.rotation.map(THREE.Math.degToRad);\n      array.push(transformData.eulerOrder);\n      lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.postRotation) {\n      var array = transformData.postRotation.map(THREE.Math.degToRad);\n      array.push(transformData.eulerOrder);\n      lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n    if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n    if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n    if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n    if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n    if (transformData.parentMatrixWorld) lParentGX = transformData.parentMatrixWorld; // Global Rotation\n\n    var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);\n    var lParentGRM = new THREE.Matrix4();\n    lParentGX.extractRotation(lParentGRM); // Global Shear*Scaling\n\n    var lParentTM = new THREE.Matrix4();\n    var lLSM;\n    var lParentGSM;\n    var lParentGRSM;\n    lParentTM.copyPosition(lParentGX);\n    lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);\n    lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);\n    lLSM = lScalingM;\n    var lGlobalRS;\n\n    if (inheritType === 0) {\n      lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n    } else if (inheritType === 1) {\n      lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n    } else {\n      var lParentLSM = new THREE.Matrix4().copy(lScalingM);\n      var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));\n      lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n    } // Calculate the local transform matrix\n\n\n    var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));\n    var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\n    var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);\n    lGlobalT.copyPosition(lGlobalTranslation);\n    lTransform = lGlobalT.multiply(lGlobalRS);\n    return lTransform;\n  } // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\n  function getEulerOrder(order) {\n    order = order || 0;\n    var enums = ['ZYX', // -> XYZ extrinsic\n    'YZX', // -> XZY extrinsic\n    'XZY', // -> YZX extrinsic\n    'ZXY', // -> YXZ extrinsic\n    'YXZ', // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n\n    return enums[order];\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n\n  function parseNumberArray(value) {\n    var array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n\n  function append(a, b) {\n    for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n\n  function slice(a, b, from, to) {\n    for (var i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n\n    return a;\n  } // inject array a2 into array a1 at index\n\n\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n\n  return FBXLoader;\n}();","map":{"version":3,"sources":["C:/Users/Em/Desktop/THe Frog v3/node_modules/three/examples/js/loaders/FBXLoader.js"],"names":["THREE","FBXLoader","fbxTree","connections","sceneGraph","manager","undefined","DefaultLoadingManager","prototype","constructor","crossOrigin","load","url","onLoad","onProgress","onError","self","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","buffer","parse","error","setTimeout","itemError","value","setResourcePath","resourcePath","setCrossOrigin","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","TextureLoader","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","Loader","Handlers","console","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","sRGBEncoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrixWorld","matrix","transform","generateTransform","applyMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","subBone","matrixWorld","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","VertexColors","FBX_Deformer","skinning","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","applyToBufferAttribute","addAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalAttribute","normalMatrix","Matrix3","getNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","rawTarget","morphGeoNode","genMorphGeometry","morphGeo","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","startKnot","endKnot","Form","curve","vertices","getPoints","positions","Float32Array","toArray","BufferAttribute","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","Euler","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","inverse","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","elem","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","version","getUint32","log","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","propertyListLen","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","Zlib","inflate","Inflate","reader2","decompress","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","lLSM","lParentGSM","lParentGRSM","copyPosition","getInverse","lGlobalRS","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"mappings":"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","sourcesContent":["/**\n * @author Kyle-Larson https://github.com/Kyle-Larson\n * @author Takahiro https://github.com/takahirox\n * @author Lewy Blue https://github.com/looeee\n *\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nTHREE.FBXLoader = ( function () {\n\n\tvar fbxTree;\n\tvar connections;\n\tvar sceneGraph;\n\n\tfunction FBXLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t}\n\n\tFBXLoader.prototype = {\n\n\t\tconstructor: FBXLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar self = this;\n\n\t\t\tvar path = ( self.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : self.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( self.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( self.parse( buffer, path ) );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tself.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( value ) {\n\n\t\t\tthis.resourcePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( FBXBuffer, path ) {\n\n\t\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t\t}\n\n\t\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t\t}\n\n\t\t\t// console.log( fbxTree );\n\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\treturn new FBXTreeParser( textureLoader ).parse( fbxTree );\n\n\t\t}\n\n\t};\n\n\t// Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\tfunction FBXTreeParser( textureLoader ) {\n\n\t\tthis.textureLoader = textureLoader;\n\n\t}\n\n\tFBXTreeParser.prototype = {\n\n\t\tconstructor: FBXTreeParser,\n\n\t\tparse: function () {\n\n\t\t\tconnections = this.parseConnections();\n\n\t\t\tvar images = this.parseImages();\n\t\t\tvar textures = this.parseTextures( images );\n\t\t\tvar materials = this.parseMaterials( textures );\n\t\t\tvar deformers = this.parseDeformers();\n\t\t\tvar geometryMap = new GeometryParser().parse( deformers );\n\n\t\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\t\treturn sceneGraph;\n\n\t\t},\n\n\t\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t\t// and details the connection type\n\t\tparseConnections: function () {\n\n\t\t\tvar connectionMap = new Map();\n\n\t\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\t\tvar rawConnections = fbxTree.Connections.connections;\n\n\t\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\t\tvar fromID = rawConnection[ 0 ];\n\t\t\t\t\tvar toID = rawConnection[ 1 ];\n\t\t\t\t\tvar relationship = rawConnection[ 2 ];\n\n\t\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn connectionMap;\n\n\t\t},\n\n\t\t// Parse FBXTree.Objects.Video for embedded image data\n\t\t// These images are connected to textures in FBXTree.Objects.Textures\n\t\t// via FBXTree.Connections.\n\t\tparseImages: function () {\n\n\t\t\tvar images = {};\n\t\t\tvar blobs = {};\n\n\t\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\t\tvar videoNodes = fbxTree.Objects.Video;\n\n\t\t\t\tfor ( var nodeID in videoNodes ) {\n\n\t\t\t\t\tvar videoNode = videoNodes[ nodeID ];\n\n\t\t\t\t\tvar id = parseInt( nodeID );\n\n\t\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\t\tvar arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\t\tvar base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\t\tvar image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var id in images ) {\n\n\t\t\t\tvar filename = images[ id ];\n\n\t\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\t// Parse embedded image data in FBXTree.Video.Content\n\t\tparseImage: function ( videoNode ) {\n\n\t\t\tvar content = videoNode.Content;\n\t\t\tvar fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\t\tvar extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\t\tvar type;\n\n\t\t\tswitch ( extension ) {\n\n\t\t\t\tcase 'bmp':\n\n\t\t\t\t\ttype = 'image/bmp';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'jpg':\n\t\t\t\tcase 'jpeg':\n\n\t\t\t\t\ttype = 'image/jpeg';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'png':\n\n\t\t\t\t\ttype = 'image/png';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tif':\n\n\t\t\t\t\ttype = 'image/tiff';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tga':\n\n\t\t\t\t\tif ( THREE.Loader.Handlers.get( '.tga' ) === null ) {\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttype = 'image/tga';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t\t} else { // Binary Format\n\n\t\t\t\tvar array = new Uint8Array( content );\n\t\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Texture\n\t\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t\t// to images in FBXTree.Objects.Video\n\t\tparseTextures: function ( images ) {\n\n\t\t\tvar textureMap = new Map();\n\n\t\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\t\tvar textureNodes = fbxTree.Objects.Texture;\n\t\t\t\tfor ( var nodeID in textureNodes ) {\n\n\t\t\t\t\tvar texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textureMap;\n\n\t\t},\n\n\t\t// Parse individual node in FBXTree.Objects.Texture\n\t\tparseTexture: function ( textureNode, images ) {\n\n\t\t\tvar texture = this.loadTexture( textureNode, images );\n\n\t\t\ttexture.ID = textureNode.id;\n\n\t\t\ttexture.name = textureNode.attrName;\n\n\t\t\tvar wrapModeU = textureNode.WrapModeU;\n\t\t\tvar wrapModeV = textureNode.WrapModeV;\n\n\t\t\tvar valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\t\tvar valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t\t// 0: repeat(default), 1: clamp\n\n\t\t\ttexture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n\t\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\t\tvar values = textureNode.Scaling.value;\n\n\t\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n\t\tloadTexture: function ( textureNode, images ) {\n\n\t\t\tvar fileName;\n\n\t\t\tvar currentPath = this.textureLoader.path;\n\n\t\t\tvar children = connections.get( textureNode.id ).children;\n\n\t\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar texture;\n\n\t\t\tvar extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\t\tif ( extension === 'tga' ) {\n\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( '.tga' );\n\n\t\t\t\tif ( loader === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t\t}\n\n\t\t\t} else if ( extension === 'psd' ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t} else {\n\n\t\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t\t}\n\n\t\t\tthis.textureLoader.setPath( currentPath );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Material\n\t\tparseMaterials: function ( textureMap ) {\n\n\t\t\tvar materialMap = new Map();\n\n\t\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\t\tvar materialNodes = fbxTree.Objects.Material;\n\n\t\t\t\tfor ( var nodeID in materialNodes ) {\n\n\t\t\t\t\tvar material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materialMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Material\n\t\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t\t// FBX format currently only supports Lambert and Phong shading models\n\t\tparseMaterial: function ( materialNode, textureMap ) {\n\n\t\t\tvar ID = materialNode.id;\n\t\t\tvar name = materialNode.attrName;\n\t\t\tvar type = materialNode.ShadingModel;\n\n\t\t\t// Case where FBX wraps shading model in property object.\n\t\t\tif ( typeof type === 'object' ) {\n\n\t\t\t\ttype = type.value;\n\n\t\t\t}\n\n\t\t\t// Ignore unused materials which don't have any connections.\n\t\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\t\tvar parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\t\tvar material;\n\n\t\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\t\tcase 'phong':\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'lambert':\n\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tmaterial.setValues( parameters );\n\t\t\tmaterial.name = name;\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\t// Parse FBX material and return parameters suitable for a three.js material\n\t\t// Also parse the texture map and return any textures associated with the material\n\t\tparseParameters: function ( materialNode, textureMap, ID ) {\n\n\t\t\tvar parameters = {};\n\n\t\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Diffuse ) {\n\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.Diffuse.value );\n\n\t\t\t} else if ( materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t\t}\n\n\t\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t\t}\n\n\t\t\tif ( materialNode.Emissive ) {\n\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.Emissive.value );\n\n\t\t\t} else if ( materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t\t}\n\n\t\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t\t}\n\n\t\t\tif ( materialNode.Opacity ) {\n\n\t\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t\t}\n\n\t\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\t\tparameters.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t\t}\n\n\t\t\tif ( materialNode.Shininess ) {\n\n\t\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t\t}\n\n\t\t\tif ( materialNode.Specular ) {\n\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.Specular.value );\n\n\t\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t\t}\n\n\t\t\tvar self = this;\n\t\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\t\tvar type = child.relationship;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'Bump':\n\t\t\t\t\t\tparameters.bumpMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\t\tparameters.aoMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DiffuseColor':\n\t\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\t\tparameters.map = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.map.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\t\tparameters.displacementMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\t\tparameters.emissiveMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.emissiveMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NormalMap':\n\t\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\t\tparameters.normalMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\t\tparameters.envMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\t\t\tparameters.envMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\t\tparameters.specularMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.specularMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TransparentColor':\n\t\t\t\t\t\tparameters.alphaMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientColor':\n\t\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn parameters;\n\n\t\t},\n\n\t\t// get a texture from the textureMap for use by a material.\n\t\tgetTexture: function ( textureMap, id ) {\n\n\t\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t\t}\n\n\t\t\treturn textureMap.get( id );\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Deformer\n\t\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\t\tparseDeformers: function () {\n\n\t\t\tvar skeletons = {};\n\t\t\tvar morphTargets = {};\n\n\t\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\t\tvar DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\t\tfor ( var nodeID in DeformerNodes ) {\n\n\t\t\t\t\tvar deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\t\tvar skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\t\tvar morphTarget = {\n\t\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\n\t\t\t\tskeletons: skeletons,\n\t\t\t\tmorphTargets: morphTargets,\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse single nodes in FBXTree.Objects.Deformer\n\t\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t\t// Each skin node represents a skeleton and each cluster node represents a bone\n\t\tparseSkeleton: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawBones = [];\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar boneNode = deformerNodes[ child.ID ];\n\n\t\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\t\tvar rawBone = {\n\n\t\t\t\t\tID: child.ID,\n\t\t\t\t\tindices: [],\n\t\t\t\t\tweights: [],\n\t\t\t\t\ttransformLink: new THREE.Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t\t// transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t\t};\n\n\t\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t\t}\n\n\t\t\t\trawBones.push( rawBone );\n\n\t\t\t} );\n\n\t\t\treturn {\n\n\t\t\t\trawBones: rawBones,\n\t\t\t\tbones: []\n\n\t\t\t};\n\n\t\t},\n\n\t\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\t\tparseMorphTargets: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawMorphTargets = [];\n\n\t\t\tfor ( var i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\t\tvar child = relationships.children[ i ];\n\n\t\t\t\tvar morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\t\tvar rawMorphTarget = {\n\n\t\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\t\tid: morphTargetNode.id,\n\t\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t\t};\n\n\t\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t\t}\n\n\t\t\treturn rawMorphTargets;\n\n\t\t},\n\n\t\t// create the main THREE.Group() to be returned by the loader\n\t\tparseScene: function ( deformers, geometryMap, materialMap ) {\n\n\t\t\tsceneGraph = new THREE.Group();\n\n\t\t\tvar modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tvar self = this;\n\t\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\t\tvar modelNode = modelNodes[ model.ID ];\n\t\t\t\tself.setLookAtProperties( model, modelNode );\n\n\t\t\t\tvar parentConnections = connections.get( model.ID ).parents;\n\n\t\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\t\tvar parent = modelMap.get( connection.ID );\n\t\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( model.parent === null ) {\n\n\t\t\t\t\tsceneGraph.add( model );\n\n\t\t\t\t}\n\n\n\t\t\t} );\n\n\t\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\t\tthis.createAmbientLight();\n\n\t\t\tthis.setupMorphMaterials();\n\n\t\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\t\tif ( node.parent ) node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n\n\t\t\t\t\tvar transform = generateTransform( node.userData.transformData );\n\n\t\t\t\t\tnode.applyMatrix( transform );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tvar animations = new AnimationParser().parse();\n\n\t\t\t// if all the models where already combined in a single group, just return that\n\t\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t\t}\n\n\t\t\tsceneGraph.animations = animations;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.Model\n\t\tparseModels: function ( skeletons, geometryMap, materialMap ) {\n\n\t\t\tvar modelMap = new Map();\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tfor ( var nodeID in modelNodes ) {\n\n\t\t\t\tvar id = parseInt( nodeID );\n\t\t\t\tvar node = modelNodes[ nodeID ];\n\t\t\t\tvar relationships = connections.get( id );\n\n\t\t\t\tvar model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\t\tif ( ! model ) {\n\n\t\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\t\tmodel = new THREE.Bone();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Null':\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmodel = new THREE.Group();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.name = THREE.PropertyBinding.sanitizeNodeName( node.attrName );\n\t\t\t\t\tmodel.ID = id;\n\n\t\t\t\t}\n\n\t\t\t\tthis.getTransformData( model, node );\n\t\t\t\tmodelMap.set( id, model );\n\n\t\t\t}\n\n\t\t\treturn modelMap;\n\n\t\t},\n\n\t\tbuildSkeleton: function ( relationships, skeletons, id, name ) {\n\n\t\t\tvar bone = null;\n\n\t\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\t\tvar subBone = bone;\n\t\t\t\t\t\t\tbone = new THREE.Bone();\n\n\t\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\t\t\t\t\t\t\tbone.name = THREE.PropertyBinding.sanitizeNodeName( name );\n\t\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn bone;\n\n\t\t},\n\n\t\t// create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n\t\tcreateCamera: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar cameraAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tcameraAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type = 0;\n\t\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\t\ttype = 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar nearClippingPlane = 1;\n\t\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t\t}\n\n\t\t\t\tvar farClippingPlane = 1000;\n\t\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t\t}\n\n\n\t\t\t\tvar width = window.innerWidth;\n\t\t\t\tvar height = window.innerHeight;\n\n\t\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar aspect = width / height;\n\n\t\t\t\tvar fov = 45;\n\t\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Perspective\n\t\t\t\t\t\tmodel = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\t\tmodel = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\t\tmodel = new THREE.Object3D();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\t// Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\t\tcreateLight: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar lightAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tlightAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( lightAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type;\n\n\t\t\t\t// LightType can be undefined for Point lights\n\t\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\t\ttype = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar color = 0xffffff;\n\n\t\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\t\tcolor = new THREE.Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t\t}\n\n\t\t\t\tvar intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t\t// light disabled\n\t\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\t\tintensity = 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar distance = 0;\n\t\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\t\tdistance = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\t\tvar decay = 1;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Point\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity, distance, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Directional\n\t\t\t\t\t\tmodel = new THREE.DirectionalLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 2: // Spot\n\t\t\t\t\t\tvar angle = Math.PI / 3;\n\n\t\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\t\tangle = THREE.Math.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar penumbra = 0;\n\t\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\t\tpenumbra = THREE.Math.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodel = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\t\tmodel.castShadow = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateMesh: function ( relationships, geometryMap, materialMap ) {\n\n\t\t\tvar model;\n\t\t\tvar geometry = null;\n\t\t\tvar material = null;\n\t\t\tvar materials = [];\n\n\t\t\t// get geometry and materials(s) from connections\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( materials.length > 1 ) {\n\n\t\t\t\tmaterial = materials;\n\n\t\t\t} else if ( materials.length > 0 ) {\n\n\t\t\t\tmaterial = materials[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\t\tmaterials.push( material );\n\n\t\t\t}\n\n\t\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.vertexColors = THREE.VertexColors;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t} );\n\n\t\t\t\tmodel = new THREE.SkinnedMesh( geometry, material );\n\t\t\t\tmodel.normalizeSkinWeights();\n\n\t\t\t} else {\n\n\t\t\t\tmodel = new THREE.Mesh( geometry, material );\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateCurve: function ( relationships, geometryMap ) {\n\n\t\t\tvar geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\t\treturn geo;\n\n\t\t\t}, null );\n\n\t\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\t\tvar material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\t\treturn new THREE.Line( geometry, material );\n\n\t\t},\n\n\t\t// parse the model node for transform data\n\t\tgetTransformData: function ( model, modelNode ) {\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\t\telse transformData.eulerOrder = 'ZYX';\n\n\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\t\tmodel.userData.transformData = transformData;\n\n\t\t},\n\n\t\tsetLookAtProperties: function ( model, modelNode ) {\n\n\t\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\t\tvar children = connections.get( model.ID ).children;\n\n\t\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\t\tvar lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\t\tvar pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\t\tmodel.lookAt( new THREE.Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbindSkeleton: function ( skeletons, geometryMap, modelMap ) {\n\n\t\t\tvar bindMatrices = this.parsePoseNodes();\n\n\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\tvar parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\t\tvar geoID = parent.ID;\n\t\t\t\t\t\tvar geoRelationships = connections.get( geoID );\n\n\t\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\t\tvar model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\t\tmodel.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparsePoseNodes: function () {\n\n\t\t\tvar bindMatrices = {};\n\n\t\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\t\tvar BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\t\tfor ( var nodeID in BindPoseNode ) {\n\n\t\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {\n\n\t\t\t\t\t\tvar poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bindMatrices;\n\n\t\t},\n\n\t\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\t\tcreateAmbientLight: function () {\n\n\t\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\tvar ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\tvar r = ambientColor[ 0 ];\n\t\t\t\tvar g = ambientColor[ 1 ];\n\t\t\t\tvar b = ambientColor[ 2 ];\n\n\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\tvar color = new THREE.Color( r, g, b );\n\t\t\t\t\tsceneGraph.add( new THREE.AmbientLight( color, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetupMorphMaterials: function () {\n\n\t\t\tvar self = this;\n\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\tif ( child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length ) {\n\n\t\t\t\t\t\tif ( Array.isArray( child.material ) ) {\n\n\t\t\t\t\t\t\tchild.material.forEach( function ( material, i ) {\n\n\t\t\t\t\t\t\t\tself.setupMorphMaterial( child, material, i );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tself.setupMorphMaterial( child, child.material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t\tsetupMorphMaterial: function ( child, material, index ) {\n\n\t\t\tvar uuid = child.uuid;\n\t\t\tvar matUuid = material.uuid;\n\n\t\t\t// if a geometry has morph targets, it cannot share the material with other geometries\n\t\t\tvar sharedMat = false;\n\n\t\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\t\tif ( node.isMesh ) {\n\n\t\t\t\t\tif ( Array.isArray( node.material ) ) {\n\n\t\t\t\t\t\tnode.material.forEach( function ( mat ) {\n\n\t\t\t\t\t\t\tif ( mat.uuid === matUuid && node.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else if ( node.material.uuid === matUuid && node.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( sharedMat === true ) {\n\n\t\t\t\tvar clonedMat = material.clone();\n\t\t\t\tclonedMat.morphTargets = true;\n\n\t\t\t\tif ( index === undefined ) child.material = clonedMat;\n\t\t\t\telse child.material[ index ] = clonedMat;\n\n\t\t\t} else material.morphTargets = true;\n\n\t\t}\n\n\t};\n\n\t// parse Geometry data from FBXTree and return map of BufferGeometries\n\tfunction GeometryParser() {}\n\n\tGeometryParser.prototype = {\n\n\t\tconstructor: GeometryParser,\n\n\t\t// Parse nodes in FBXTree.Objects.Geometry\n\t\tparse: function ( deformers ) {\n\n\t\t\tvar geometryMap = new Map();\n\n\t\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\t\tvar geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\t\tfor ( var nodeID in geoNodes ) {\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\t\tvar geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometryMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Geometry\n\t\tparseGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tswitch ( geoNode.attrType ) {\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\t\tparseMeshGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tvar skeletons = deformers.skeletons;\n\t\t\tvar morphTargets = deformers.morphTargets;\n\n\t\t\tvar modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t\t} );\n\n\t\t\t// don't create geometry if it is not associated with any models\n\t\t\tif ( modelNodes.length === 0 ) return;\n\n\t\t\tvar skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\t\treturn skeleton;\n\n\t\t\t}, null );\n\n\t\t\tvar morphTarget = relationships.children.reduce( function ( morphTarget, child ) {\n\n\t\t\t\tif ( morphTargets[ child.ID ] !== undefined ) morphTarget = morphTargets[ child.ID ];\n\n\t\t\t\treturn morphTarget;\n\n\t\t\t}, null );\n\n\t\t\t// Assume one model and get the preRotation from that\n\t\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\t\tvar modelNode = modelNodes[ 0 ];\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\treturn this.genGeometry( geoNode, skeleton, morphTarget, transform );\n\n\t\t},\n\n\t\t// Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n\t\tgenGeometry: function ( geoNode, skeleton, morphTarget, preTransform ) {\n\n\t\t\tvar geo = new THREE.BufferGeometry();\n\t\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\t\tvar geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\t\tvar buffers = this.genBuffers( geoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tgeo.addAttribute( 'position', positionAttribute );\n\n\t\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\t\tgeo.addAttribute( 'color', new THREE.Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tgeo.addAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\t\tgeo.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t\t// used later to bind the skeleton to the model\n\t\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t\t}\n\n\t\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\t\tvar normalAttribute = new THREE.Float32BufferAttribute( buffers.normal, 3 );\n\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normalAttribute );\n\n\t\t\t\tgeo.addAttribute( 'normal', normalAttribute );\n\n\t\t\t}\n\n\t\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\t\tvar name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t\t// the first uv buffer is just called 'uv'\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tname = 'uv';\n\n\t\t\t\t}\n\n\t\t\t\tgeo.addAttribute( name, new THREE.Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t\t} );\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\t\tvar prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\t\tvar startIndex = 0;\n\n\t\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\t\tvar lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\t\tvar lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t\t// using one of them\n\t\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addMorphTargets( geo, geoNode, morphTarget, preTransform );\n\n\t\t\treturn geo;\n\n\t\t},\n\n\t\tparseGeoNode: function ( geoNode, skeleton ) {\n\n\t\t\tvar geoInfo = {};\n\n\t\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\t\tgeoInfo.uv = [];\n\n\t\t\t\tvar i = 0;\n\t\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\t\t\t\t\ti ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeoInfo.weightTable = {};\n\n\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\t\tid: i,\n\t\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn geoInfo;\n\n\t\t},\n\n\t\tgenBuffers: function ( geoInfo ) {\n\n\t\t\tvar buffers = {\n\t\t\t\tvertex: [],\n\t\t\t\tnormal: [],\n\t\t\t\tcolors: [],\n\t\t\t\tuvs: [],\n\t\t\t\tmaterialIndex: [],\n\t\t\t\tvertexWeights: [],\n\t\t\t\tweightsIndices: [],\n\t\t\t};\n\n\t\t\tvar polygonIndex = 0;\n\t\t\tvar faceLength = 0;\n\t\t\tvar displayedWeightsWarning = false;\n\n\t\t\t// these will hold data for a single face\n\t\t\tvar facePositionIndexes = [];\n\t\t\tvar faceNormals = [];\n\t\t\tvar faceColors = [];\n\t\t\tvar faceUVs = [];\n\t\t\tvar faceWeights = [];\n\t\t\tvar faceWeightIndices = [];\n\n\t\t\tvar self = this;\n\t\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\t\tvar endOfFace = false;\n\n\t\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t\t// A cube with quad faces looks like this:\n\t\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t\t//  }\n\t\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\t\tendOfFace = true;\n\n\t\t\t\t}\n\n\t\t\t\tvar weightIndices = [];\n\t\t\t\tvar weights = [];\n\n\t\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t\t} );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\t\tvar Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\t\tvar currentWeight = weight;\n\t\t\t\t\t\t\tvar currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\t\tvar tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\t\tweights = Weight;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tvar materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tfaceLength ++;\n\n\t\t\t\tif ( endOfFace ) {\n\n\t\t\t\t\tself.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\t\tpolygonIndex ++;\n\t\t\t\t\tfaceLength = 0;\n\n\t\t\t\t\t// reset arrays for the next face\n\t\t\t\t\tfacePositionIndexes = [];\n\t\t\t\t\tfaceNormals = [];\n\t\t\t\t\tfaceColors = [];\n\t\t\t\t\tfaceUVs = [];\n\t\t\t\t\tfaceWeights = [];\n\t\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn buffers;\n\n\t\t},\n\n\t\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\t\tgenFace: function ( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\t\tfor ( var i = 2; i < faceLength; i ++ ) {\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\taddMorphTargets: function ( parentGeo, parentGeoNode, morphTarget, preTransform ) {\n\n\t\t\tif ( morphTarget === null ) return;\n\n\t\t\tparentGeo.morphAttributes.position = [];\n\t\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\t\tvar self = this;\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tvar morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tself.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\t\tgenMorphGeometry: function ( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\t\tvar morphGeo = new THREE.BufferGeometry();\n\t\t\tif ( morphGeoNode.attrName ) morphGeo.name = morphGeoNode.attrName;\n\n\t\t\tvar vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\t\t// make a copy of the parent's vertex positions\n\t\t\tvar vertexPositions = ( parentGeoNode.Vertices !== undefined ) ? parentGeoNode.Vertices.a.slice() : [];\n\n\t\t\tvar morphPositions = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\t\tvar indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\tvar morphIndex = indices[ i ] * 3;\n\n\t\t\t\t// FBX format uses blend shapes rather than morph targets. This can be converted\n\t\t\t\t// by additively combining the blend shape positions with the original geometry's positions\n\t\t\t\tvertexPositions[ morphIndex ] += morphPositions[ i * 3 ];\n\t\t\t\tvertexPositions[ morphIndex + 1 ] += morphPositions[ i * 3 + 1 ];\n\t\t\t\tvertexPositions[ morphIndex + 2 ] += morphPositions[ i * 3 + 2 ];\n\n\t\t\t}\n\n\t\t\t// TODO: add morph normal support\n\t\t\tvar morphGeoInfo = {\n\t\t\t\tvertexIndices: vertexIndices,\n\t\t\t\tvertexPositions: vertexPositions,\n\t\t\t};\n\n\t\t\tvar morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t\t},\n\n\t\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\t\tparseNormals: function ( NormalNode ) {\n\n\t\t\tvar mappingType = NormalNode.MappingInformationType;\n\t\t\tvar referenceType = NormalNode.ReferenceInformationType;\n\t\t\tvar buffer = NormalNode.Normals.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 3,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\t\tparseUVs: function ( UVNode ) {\n\n\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\tvar buffer = UVNode.UV.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 2,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\t\tparseVertexColors: function ( ColorNode ) {\n\n\t\t\tvar mappingType = ColorNode.MappingInformationType;\n\t\t\tvar referenceType = ColorNode.ReferenceInformationType;\n\t\t\tvar buffer = ColorNode.Colors.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 4,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\t\tparseMaterialIndices: function ( MaterialNode ) {\n\n\t\t\tvar mappingType = MaterialNode.MappingInformationType;\n\t\t\tvar referenceType = MaterialNode.ReferenceInformationType;\n\n\t\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 1,\n\t\t\t\t\tbuffer: [ 0 ],\n\t\t\t\t\tindices: [ 0 ],\n\t\t\t\t\tmappingType: 'AllSame',\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t\t// for conforming with the other functions we've written for other data.\n\t\t\tvar materialIndices = [];\n\n\t\t\tfor ( var i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\t\tmaterialIndices.push( i );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: materialIndexBuffer,\n\t\t\t\tindices: materialIndices,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\t\tparseNurbsGeometry: function ( geoNode ) {\n\n\t\t\tif ( THREE.NURBSCurve === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar order = parseInt( geoNode.Order );\n\n\t\t\tif ( isNaN( order ) ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar degree = order - 1;\n\n\t\t\tvar knots = geoNode.KnotVector.a;\n\t\t\tvar controlPoints = [];\n\t\t\tvar pointsValues = geoNode.Points.a;\n\n\t\t\tfor ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\t\tcontrolPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );\n\n\t\t\t}\n\n\t\t\tvar startKnot, endKnot;\n\n\t\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\t\tstartKnot = degree;\n\t\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\t\tfor ( var i = 0; i < degree; ++ i ) {\n\n\t\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\t\tvar vertices = curve.getPoints( controlPoints.length * 7 );\n\n\t\t\tvar positions = new Float32Array( vertices.length * 3 );\n\n\t\t\tvertices.forEach( function ( vertex, i ) {\n\n\t\t\t\tvertex.toArray( positions, i * 3 );\n\n\t\t\t} );\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t},\n\n\t};\n\n\t// parse animation data from FBXTree\n\tfunction AnimationParser() {}\n\n\tAnimationParser.prototype = {\n\n\t\tconstructor: AnimationParser,\n\n\t\t// take raw animation clips and turn them into three.js animation clips\n\t\tparse: function () {\n\n\t\t\tvar animationClips = [];\n\n\t\t\tvar rawClips = this.parseClips();\n\n\t\t\tif ( rawClips !== undefined ) {\n\n\t\t\t\tfor ( var key in rawClips ) {\n\n\t\t\t\t\tvar rawClip = rawClips[ key ];\n\n\t\t\t\t\tvar clip = this.addClip( rawClip );\n\n\t\t\t\t\tanimationClips.push( clip );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn animationClips;\n\n\t\t},\n\n\t\tparseClips: function () {\n\n\t\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t\t// if this is undefined we can safely assume there are no animations\n\t\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\t\tvar curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\t\tvar layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\t\tvar rawClips = this.parseAnimStacks( layersMap );\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t\t// and is referenced by an AnimationLayer\n\t\tparseAnimationCurveNodes: function () {\n\n\t\t\tvar rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\t\tvar curveNodesMap = new Map();\n\n\t\t\tfor ( var nodeID in rawCurveNodes ) {\n\n\t\t\t\tvar rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\t\tvar curveNode = {\n\n\t\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\t\tcurves: {},\n\n\t\t\t\t\t};\n\n\t\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn curveNodesMap;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t\t// axis ( e.g. times and values of x rotation)\n\t\tparseAnimationCurves: function ( curveNodesMap ) {\n\n\t\t\tvar rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t\t// clearly, this should be optimised to\n\t\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\t\tfor ( var nodeID in rawCurves ) {\n\n\t\t\t\tvar animationCurve = {\n\n\t\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t\t};\n\n\t\t\t\tvar relationships = connections.get( animationCurve.id );\n\n\t\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\t\tvar animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\t\tvar animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\t\tparseAnimationLayers: function ( curveNodesMap ) {\n\n\t\t\tvar rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\t\tvar layersMap = new Map();\n\n\t\t\tfor ( var nodeID in rawLayers ) {\n\n\t\t\t\tvar layerCurveNodes = [];\n\n\t\t\t\tvar connection = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\t\tvar children = connection.children;\n\n\t\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\t\tvar curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new THREE.Matrix4();\n\n\t\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\tvar morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\t\tvar geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\t\tvar modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn layersMap;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t\t// hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n\t\tparseAnimStacks: function ( layersMap ) {\n\n\t\t\tvar rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t\t// connect the stacks (clips) up to the layers\n\t\t\tvar rawClips = {};\n\n\t\t\tfor ( var nodeID in rawStacks ) {\n\n\t\t\t\tvar children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t\t}\n\n\t\t\t\tvar layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\t\tlayer: layer,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\taddClip: function ( rawClip ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar self = this;\n\t\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\t\ttracks = tracks.concat( self.generateTracks( rawTracks ) );\n\n\t\t\t} );\n\n\t\t\treturn new THREE.AnimationClip( rawClip.name, - 1, tracks );\n\n\t\t},\n\n\t\tgenerateTracks: function ( rawTracks ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar initialPosition = new THREE.Vector3();\n\t\t\tvar initialRotation = new THREE.Quaternion();\n\t\t\tvar initialScale = new THREE.Vector3();\n\n\t\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\t\tinitialPosition = initialPosition.toArray();\n\t\t\tinitialRotation = new THREE.Euler().setFromQuaternion( initialRotation, rawTracks.eulerOrder ).toArray();\n\t\t\tinitialScale = initialScale.toArray();\n\n\t\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\t\tvar positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\t\tvar rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\t\tvar scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\t\tvar morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t\t}\n\n\t\t\treturn tracks;\n\n\t\t},\n\n\t\tgenerateVectorTrack: function ( modelName, curves, initialValue, type ) {\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\treturn new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t\t},\n\n\t\tgenerateRotationTrack: function ( modelName, curves, initialValue, preRotation, postRotation, eulerOrder ) {\n\n\t\t\tif ( curves.x !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.x );\n\t\t\t\tcurves.x.values = curves.x.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.y !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.y );\n\t\t\t\tcurves.y.values = curves.y.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.z !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.z );\n\t\t\t\tcurves.z.values = curves.z.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\tif ( preRotation !== undefined ) {\n\n\t\t\t\tpreRotation = preRotation.map( THREE.Math.degToRad );\n\t\t\t\tpreRotation.push( eulerOrder );\n\n\t\t\t\tpreRotation = new THREE.Euler().fromArray( preRotation );\n\t\t\t\tpreRotation = new THREE.Quaternion().setFromEuler( preRotation );\n\n\t\t\t}\n\n\t\t\tif ( postRotation !== undefined ) {\n\n\t\t\t\tpostRotation = postRotation.map( THREE.Math.degToRad );\n\t\t\t\tpostRotation.push( eulerOrder );\n\n\t\t\t\tpostRotation = new THREE.Euler().fromArray( postRotation );\n\t\t\t\tpostRotation = new THREE.Quaternion().setFromEuler( postRotation ).inverse();\n\n\t\t\t}\n\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\tvar euler = new THREE.Euler();\n\n\t\t\tvar quaternionValues = [];\n\n\t\t\tfor ( var i = 0; i < values.length; i += 3 ) {\n\n\t\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\n\t\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t\t}\n\n\t\t\treturn new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t\t},\n\n\t\tgenerateMorphTrack: function ( rawTracks ) {\n\n\t\t\tvar curves = rawTracks.DeformPercent.curves.morph;\n\t\t\tvar values = curves.values.map( function ( val ) {\n\n\t\t\t\treturn val / 100;\n\n\t\t\t} );\n\n\t\t\tvar morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\t\treturn new THREE.NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t\t},\n\n\t\t// For all animated objects, times are defined separately for each axis\n\t\t// Here we'll combine the times into one sorted array without duplicates\n\t\tgetTimesForAllAxes: function ( curves ) {\n\n\t\t\tvar times = [];\n\n\t\t\t// first join together the times for each axis, if defined\n\t\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t\t// then sort them and remove duplicates\n\t\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\t\treturn a - b;\n\n\t\t\t} ).filter( function ( elem, index, array ) {\n\n\t\t\t\treturn array.indexOf( elem ) == index;\n\n\t\t\t} );\n\n\t\t\treturn times;\n\n\t\t},\n\n\t\tgetKeyframeTrackValues: function ( times, curves, initialValue ) {\n\n\t\t\tvar prevValue = initialValue;\n\n\t\t\tvar values = [];\n\n\t\t\tvar xIndex = - 1;\n\t\t\tvar yIndex = - 1;\n\t\t\tvar zIndex = - 1;\n\n\t\t\ttimes.forEach( function ( time ) {\n\n\t\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t\t// if there is an x value defined for this frame, use that\n\t\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\t\tvar xValue = curves.x.values[ xIndex ];\n\t\t\t\t\tvalues.push( xValue );\n\t\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\t\tvar yValue = curves.y.values[ yIndex ];\n\t\t\t\t\tvalues.push( yValue );\n\t\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\t\tvar zValue = curves.z.values[ zIndex ];\n\t\t\t\t\tvalues.push( zValue );\n\t\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn values;\n\n\t\t},\n\n\t\t// Rotations are defined as Euler angles which can have values  of any size\n\t\t// These will be converted to quaternions which don't support values greater than\n\t\t// PI, so we'll interpolate large rotations\n\t\tinterpolateRotations: function ( curve ) {\n\n\t\t\tfor ( var i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\t\tvar initialValue = curve.values[ i - 1 ];\n\t\t\t\tvar valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\t\tvar absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\t\tvar numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\t\tvar step = valuesSpan / numSubIntervals;\n\t\t\t\t\tvar nextValue = initialValue + step;\n\n\t\t\t\t\tvar initialTime = curve.times[ i - 1 ];\n\t\t\t\t\tvar timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\t\tvar interval = timeSpan / numSubIntervals;\n\t\t\t\t\tvar nextTime = initialTime + interval;\n\n\t\t\t\t\tvar interpolatedTimes = [];\n\t\t\t\t\tvar interpolatedValues = [];\n\n\t\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\t\tnextValue += step;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\t// parse an FBX file in ASCII format\n\tfunction TextParser() {}\n\n\tTextParser.prototype = {\n\n\t\tconstructor: TextParser,\n\n\t\tgetPrevNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t\t},\n\n\t\tgetCurrentNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t\t},\n\n\t\tgetCurrentProp: function () {\n\n\t\t\treturn this.currentProp;\n\n\t\t},\n\n\t\tpushStack: function ( node ) {\n\n\t\t\tthis.nodeStack.push( node );\n\t\t\tthis.currentIndent += 1;\n\n\t\t},\n\n\t\tpopStack: function () {\n\n\t\t\tthis.nodeStack.pop();\n\t\t\tthis.currentIndent -= 1;\n\n\t\t},\n\n\t\tsetCurrentProp: function ( val, name ) {\n\n\t\t\tthis.currentProp = val;\n\t\t\tthis.currentPropName = name;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tthis.currentIndent = 0;\n\n\t\t\tthis.allNodes = new FBXTree();\n\t\t\tthis.nodeStack = [];\n\t\t\tthis.currentProp = [];\n\t\t\tthis.currentPropName = '';\n\n\t\t\tvar self = this;\n\n\t\t\tvar split = text.split( /[\\r\\n]+/ );\n\n\t\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\t\tvar matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\t\tvar matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\t\tvar matchBeginning = line.match( '^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\t\tvar matchProperty = line.match( '^\\\\t{' + ( self.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\t\tvar matchEnd = line.match( '^\\\\t{' + ( self.currentIndent - 1 ) + '}}' );\n\n\t\t\t\tif ( matchBeginning ) {\n\n\t\t\t\t\tself.parseNodeBegin( line, matchBeginning );\n\n\t\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\t\tself.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\t\tself.popStack();\n\n\t\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\t\tself.parseNodePropertyContinued( line );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this.allNodes;\n\n\t\t},\n\n\t\tparseNodeBegin: function ( line, property ) {\n\n\t\t\tvar nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\tvar nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t} );\n\n\t\t\tvar node = { name: nodeName };\n\t\t\tvar attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t// a top node\n\t\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t\t} else { // a subnode\n\n\t\t\t\t// if the subnode already exists, append it\n\t\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\t\tthis.pushStack( node );\n\n\t\t},\n\n\t\tparseNodeAttr: function ( attrs ) {\n\n\t\t\tvar id = attrs[ 0 ];\n\n\t\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = '', type = '';\n\n\t\t\tif ( attrs.length > 1 ) {\n\n\t\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\t\ttype = attrs[ 2 ];\n\n\t\t\t}\n\n\t\t\treturn { id: id, name: name, type: type };\n\n\t\t},\n\n\t\tparseNodeProperty: function ( line, property, contentLine ) {\n\n\t\t\tvar propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\t\tvar propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t\t//\tContent: ,\n\t\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t\t}\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\t\t\tvar parentName = currentNode.name;\n\n\t\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Connections\n\t\t\tif ( propName === 'C' ) {\n\n\t\t\t\tvar connProps = propValue.split( ',' ).slice( 1 );\n\t\t\t\tvar from = parseInt( connProps[ 0 ] );\n\t\t\t\tvar to = parseInt( connProps[ 1 ] );\n\n\t\t\t\tvar rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t\t} );\n\n\t\t\t\tpropName = 'connections';\n\t\t\t\tpropValue = [ from, to ];\n\t\t\t\tappend( propValue, rest );\n\n\t\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Node\n\t\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t\t// connections\n\t\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t\t} else {\n\n\t\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\t\telse currentNode.a = propValue;\n\n\t\t\t}\n\n\t\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseNodePropertyContinued: function ( line ) {\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\tcurrentNode.a += line;\n\n\t\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t\t// so convert the string to an array\n\t\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse \"Property70\"\n\t\tparseNodeSpecialProperty: function ( line, propName, propValue ) {\n\n\t\t\t// split this\n\t\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t\t// into array like below\n\t\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\t\tvar props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t\t} );\n\n\t\t\tvar innerPropName = props[ 0 ];\n\t\t\tvar innerPropType1 = props[ 1 ];\n\t\t\tvar innerPropType2 = props[ 2 ];\n\t\t\tvar innerPropFlag = props[ 3 ];\n\t\t\tvar innerPropValue = props[ 4 ];\n\n\t\t\t// cast values where needed, otherwise leave as strings\n\t\t\tswitch ( innerPropType1 ) {\n\n\t\t\t\tcase 'int':\n\t\t\t\tcase 'enum':\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'ULongLong':\n\t\t\t\tcase 'double':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'FieldOfView':\n\t\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Color':\n\t\t\t\tcase 'ColorRGB':\n\t\t\t\tcase 'Vector3D':\n\t\t\t\tcase 'Lcl_Translation':\n\t\t\t\tcase 'Lcl_Rotation':\n\t\t\t\tcase 'Lcl_Scaling':\n\t\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// CAUTION: these props must append to parent's parent\n\t\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t\t},\n\n\t};\n\n\t// Parse an FBX file in Binary format\n\tfunction BinaryParser() {}\n\n\tBinaryParser.prototype = {\n\n\t\tconstructor: BinaryParser,\n\n\t\tparse: function ( buffer ) {\n\n\t\t\tvar reader = new BinaryReader( buffer );\n\t\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\t\tvar version = reader.getUint32();\n\n\t\t\tconsole.log( 'THREE.FBXLoader: FBX binary version: ' + version );\n\n\t\t\tvar allNodes = new FBXTree();\n\n\t\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\t\tvar node = this.parseNode( reader, version );\n\t\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t\t}\n\n\t\t\treturn allNodes;\n\n\t\t},\n\n\t\t// Check if reader has reached the end of content.\n\t\tendOfContent: function ( reader ) {\n\n\t\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t\t// - 16bytes: magic\n\t\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t\t// - 4bytes: magic\n\t\t\t// - 4bytes: version\n\t\t\t// - 120bytes: zero\n\t\t\t// - 16bytes: magic\n\t\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t\t} else {\n\n\t\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t\t}\n\n\t\t},\n\n\t\t// recursively parse nodes until the end of the file is reached\n\t\tparseNode: function ( reader, version ) {\n\n\t\t\tvar node = {};\n\n\t\t\t// The first three data sizes depends on version.\n\t\t\tvar endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\t\tvar numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t// note: do not remove this even if you get a linter warning as it moves the buffer forward\n\t\t\tvar propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\tvar nameLen = reader.getUint8();\n\t\t\tvar name = reader.getString( nameLen );\n\n\t\t\t// Regards this node as NULL-record if endOffset is zero\n\t\t\tif ( endOffset === 0 ) return null;\n\n\t\t\tvar propertyList = [];\n\n\t\t\tfor ( var i = 0; i < numProperties; i ++ ) {\n\n\t\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t\t}\n\n\t\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\t\tvar id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\t\tvar attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\t\tvar attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t\t// check if this node represents just a single property\n\t\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\t\tvar subNode = this.parseNode( reader, version );\n\n\t\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t\t}\n\n\t\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\t\tif ( typeof id === 'number' ) node.id = id;\n\t\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\t\tif ( name !== '' ) node.name = name;\n\n\t\t\treturn node;\n\n\t\t},\n\n\t\tparseSubNode: function ( name, node, subNode ) {\n\n\t\t\t// special case: child node is single property\n\t\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\t\tvar value = subNode.propertyList[ 0 ];\n\n\t\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\tsubNode.a = value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t\t}\n\n\t\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\t\tnode.connections = [];\n\n\t\t\t\t}\n\n\t\t\t\tnode.connections.push( array );\n\n\t\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\t\tvar keys = Object.keys( subNode );\n\n\t\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t\t} );\n\n\t\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\t\tvar innerPropName = subNode.propertyList[ 0 ];\n\t\t\t\tvar innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\t\tvar innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\t\tvar innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\t\tvar innerPropValue;\n\n\t\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\t\tinnerPropValue = [\n\t\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t\t];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t\t}\n\n\t\t\t\t// this will be copied to parent, see above\n\t\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t};\n\n\t\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseProperty: function ( reader ) {\n\n\t\t\tvar type = reader.getString( 1 );\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'C':\n\t\t\t\t\treturn reader.getBoolean();\n\n\t\t\t\tcase 'D':\n\t\t\t\t\treturn reader.getFloat64();\n\n\t\t\t\tcase 'F':\n\t\t\t\t\treturn reader.getFloat32();\n\n\t\t\t\tcase 'I':\n\t\t\t\t\treturn reader.getInt32();\n\n\t\t\t\tcase 'L':\n\t\t\t\t\treturn reader.getInt64();\n\n\t\t\t\tcase 'R':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\t\tcase 'S':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getString( length );\n\n\t\t\t\tcase 'Y':\n\t\t\t\t\treturn reader.getInt16();\n\n\t\t\t\tcase 'b':\n\t\t\t\tcase 'c':\n\t\t\t\tcase 'd':\n\t\t\t\tcase 'f':\n\t\t\t\tcase 'i':\n\t\t\t\tcase 'l':\n\n\t\t\t\t\tvar arrayLength = reader.getUint32();\n\t\t\t\t\tvar encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\t\tvar compressedLength = reader.getUint32();\n\n\t\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof Zlib === 'undefined' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\t\tvar reader2 = new BinaryReader( inflate.decompress().buffer );\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction BinaryReader( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t}\n\n\tBinaryReader.prototype = {\n\n\t\tconstructor: BinaryReader,\n\n\t\tgetOffset: function () {\n\n\t\t\treturn this.offset;\n\n\t\t},\n\n\t\tsize: function () {\n\n\t\t\treturn this.dv.buffer.byteLength;\n\n\t\t},\n\n\t\tskip: function ( length ) {\n\n\t\t\tthis.offset += length;\n\n\t\t},\n\n\t\t// seems like true/false representation depends on exporter.\n\t\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t\t// then sees LSB.\n\t\tgetBoolean: function () {\n\n\t\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t\t},\n\n\t\tgetBooleanArray: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getBoolean() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint8: function () {\n\n\t\t\tvar value = this.dv.getUint8( this.offset );\n\t\t\tthis.offset += 1;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt16: function () {\n\n\t\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\t\tthis.offset += 2;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32: function () {\n\n\t\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint32: function () {\n\n\t\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t\t// There's a possibility that this method returns wrong value if the value\n\t\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t\t// TODO: safely handle 64-bit integer\n\t\tgetInt64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\t// calculate negative value\n\t\t\tif ( high & 0x80000000 ) {\n\n\t\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetInt64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\t// Note: see getInt64() comment\n\t\tgetUint64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetFloat32: function () {\n\n\t\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetFloat64: function () {\n\n\t\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\t\tthis.offset += 8;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetArrayBuffer: function ( size ) {\n\n\t\t\tvar value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\t\tthis.offset += size;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetString: function ( size ) {\n\n\t\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta[ i ] = this.getUint8();\n\n\t\t\t}\n\n\t\t\tvar nullByte = a.indexOf( 0 );\n\t\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t\t}\n\n\t};\n\n\t// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n\t// and BinaryParser( FBX Binary format)\n\tfunction FBXTree() {}\n\n\tFBXTree.prototype = {\n\n\t\tconstructor: FBXTree,\n\n\t\tadd: function ( key, val ) {\n\n\t\t\tthis[ key ] = val;\n\n\t\t},\n\n\t};\n\n\t// ************** UTILITY FUNCTIONS **************\n\n\tfunction isFbxFormatBinary( buffer ) {\n\n\t\tvar CORRECT = 'Kaydara FBX Binary  \\0';\n\n\t\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n\t}\n\n\tfunction isFbxFormatASCII( text ) {\n\n\t\tvar CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\t\tvar cursor = 0;\n\n\t\tfunction read( offset ) {\n\n\t\t\tvar result = text[ offset - 1 ];\n\t\t\ttext = text.slice( cursor + offset );\n\t\t\tcursor ++;\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < CORRECT.length; ++ i ) {\n\n\t\t\tvar num = read( 1 );\n\t\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction getFbxVersion( text ) {\n\n\t\tvar versionRegExp = /FBXVersion: (\\d+)/;\n\t\tvar match = text.match( versionRegExp );\n\t\tif ( match ) {\n\n\t\t\tvar version = parseInt( match[ 1 ] );\n\t\t\treturn version;\n\n\t\t}\n\t\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n\t}\n\n\t// Converts FBX ticks into real time seconds.\n\tfunction convertFBXTimeToSeconds( time ) {\n\n\t\treturn time / 46186158000;\n\n\t}\n\n\tvar dataArray = [];\n\n\t// extracts the data from the correct position in the FBX array based on indexing type\n\tfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\t\tvar index;\n\n\t\tswitch ( infoObject.mappingType ) {\n\n\t\t\tcase 'ByPolygonVertex' :\n\t\t\t\tindex = polygonVertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByPolygon' :\n\t\t\t\tindex = polygonIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByVertice' :\n\t\t\t\tindex = vertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'AllSame' :\n\t\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t\t}\n\n\t\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\t\tvar from = index * infoObject.dataSize;\n\t\tvar to = from + infoObject.dataSize;\n\n\t\treturn slice( dataArray, infoObject.buffer, from, to );\n\n\t}\n\n\tvar tempEuler = new THREE.Euler();\n\tvar tempVec = new THREE.Vector3();\n\n\t// generate transformation from FBX transform data\n\t// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n\t// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\tfunction generateTransform( transformData ) {\n\n\t\tvar lTranslationM = new THREE.Matrix4();\n\t\tvar lPreRotationM = new THREE.Matrix4();\n\t\tvar lRotationM = new THREE.Matrix4();\n\t\tvar lPostRotationM = new THREE.Matrix4();\n\n\t\tvar lScalingM = new THREE.Matrix4();\n\t\tvar lScalingPivotM = new THREE.Matrix4();\n\t\tvar lScalingOffsetM = new THREE.Matrix4();\n\t\tvar lRotationOffsetM = new THREE.Matrix4();\n\t\tvar lRotationPivotM = new THREE.Matrix4();\n\n\t\tvar lParentGX = new THREE.Matrix4();\n\t\tvar lGlobalT = new THREE.Matrix4();\n\n\t\tvar inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\t\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\t\tif ( transformData.preRotation ) {\n\n\t\t\tvar array = transformData.preRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( transformData.eulerOrder );\n\t\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t}\n\n\t\tif ( transformData.rotation ) {\n\n\t\t\tvar array = transformData.rotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( transformData.eulerOrder );\n\t\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t}\n\n\t\tif ( transformData.postRotation ) {\n\n\t\t\tvar array = transformData.postRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( transformData.eulerOrder );\n\t\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t}\n\n\t\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t\t// Pivots and offsets\n\t\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\t\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\t\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\t\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t\t// parent transform\n\t\tif ( transformData.parentMatrixWorld ) lParentGX = transformData.parentMatrixWorld;\n\n\t\t// Global Rotation\n\t\tvar lLRM = lPreRotationM.multiply( lRotationM ).multiply( lPostRotationM );\n\t\tvar lParentGRM = new THREE.Matrix4();\n\t\tlParentGX.extractRotation( lParentGRM );\n\n\t\t// Global Shear*Scaling\n\t\tvar lParentTM = new THREE.Matrix4();\n\t\tvar lLSM;\n\t\tvar lParentGSM;\n\t\tvar lParentGRSM;\n\n\t\tlParentTM.copyPosition( lParentGX );\n\t\tlParentGRSM = lParentTM.getInverse( lParentTM ).multiply( lParentGX );\n\t\tlParentGSM = lParentGRM.getInverse( lParentGRM ).multiply( lParentGRSM );\n\t\tlLSM = lScalingM;\n\n\t\tvar lGlobalRS;\n\t\tif ( inheritType === 0 ) {\n\n\t\t\tlGlobalRS = lParentGRM.multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t\t} else if ( inheritType === 1 ) {\n\n\t\t\tlGlobalRS = lParentGRM.multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t\t} else {\n\n\t\t\tvar lParentLSM = new THREE.Matrix4().copy( lScalingM );\n\n\t\t\tvar lParentGSM_noLocal = lParentGSM.multiply( lParentLSM.getInverse( lParentLSM ) );\n\n\t\t\tlGlobalRS = lParentGRM.multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t\t}\n\n\t\t// Calculate the local transform matrix\n\t\tvar lTransform = lTranslationM.multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM.getInverse( lRotationPivotM ) ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM.getInverse( lScalingPivotM ) );\n\n\t\tvar lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition( lTransform );\n\n\t\tvar lGlobalTranslation = lParentGX.multiply( lLocalTWithAllPivotAndOffsetInfo );\n\t\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\t\tlTransform = lGlobalT.multiply( lGlobalRS );\n\n\t\treturn lTransform;\n\n\t}\n\n\t// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n\t// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\tfunction getEulerOrder( order ) {\n\n\t\torder = order || 0;\n\n\t\tvar enums = [\n\t\t\t'ZYX', // -> XYZ extrinsic\n\t\t\t'YZX', // -> XZY extrinsic\n\t\t\t'XZY', // -> YZX extrinsic\n\t\t\t'ZXY', // -> YXZ extrinsic\n\t\t\t'YXZ', // -> ZXY extrinsic\n\t\t\t'XYZ', // -> ZYX extrinsic\n\t\t\t//'SphericXYZ', // not possible to support\n\t\t];\n\n\t\tif ( order === 6 ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\t\treturn enums[ 0 ];\n\n\t\t}\n\n\t\treturn enums[ order ];\n\n\t}\n\n\t// Parses comma separated list of numbers and returns them an array.\n\t// Used internally by the TextParser\n\tfunction parseNumberArray( value ) {\n\n\t\tvar array = value.split( ',' ).map( function ( val ) {\n\n\t\t\treturn parseFloat( val );\n\n\t\t} );\n\n\t\treturn array;\n\n\t}\n\n\tfunction convertArrayBufferToString( buffer, from, to ) {\n\n\t\tif ( from === undefined ) from = 0;\n\t\tif ( to === undefined ) to = buffer.byteLength;\n\n\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n\t}\n\n\tfunction append( a, b ) {\n\n\t\tfor ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\tfunction slice( a, b, from, to ) {\n\n\t\tfor ( var i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// inject array a2 into array a1 at index\n\tfunction inject( a1, index, a2 ) {\n\n\t\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n\t}\n\n\treturn FBXLoader;\n\n} )();"]},"metadata":{},"sourceType":"script"}